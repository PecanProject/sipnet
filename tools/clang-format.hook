#!/usr/bin/env bash
#
# Runs clang-format on changed regions before commit.
#
# To install this, copy it to .git/hooks/pre-commit in your repo.
# Remaining installation checks/instructions will be printed when you commit.
#

read -r -d '' help <<- EOF
This repository requires you to install the clang-format command. This hook has
been tested with clang-format-19, so remove all earlier versions and reinstall if
problems occur:
$ brew install git-clang-format
or
$ sudo apt-get remove clang-format-*
$ sudo apt-get install clang-format-19
You should now have clang-format-19 installed. To ensure that git finds this binary,
update the configuration as follows:
$ git config --global clangFormat.binary clang-format-19
$ git config --global clangFormat.style file
$ git config --global alias.clang-format clang-format-19
EOF

read -r -d '' error <<- EOF
ERROR: the code to be committed is not formatted properly. You need to run one of
these commands on your commit:
$ git clang-format       # if all modifications are staged
$ git clang-format -f    # reformat all modified files

Alternately, you may run 'git commit --no-verify' to bypass this check, but note that
it will still run (and fail) in any submitted pull reviews
EOF

check_clang_format() {
  if hash git clang-format 2>/dev/null; then
    return
  else
    echo "SETUP ERROR: no git clang-format executable found, or it is not executable"
    echo "$help"
    exit 1
  fi
}

check_clang_format

echo "Checking the format of modified files with clang-format"
readonly out=$(git clang-format -v --diff)

if [[ "$out" == *"no modified files to format"* ]]; then exit 0; fi
if [[ "$out" == *"clang-format did not modify any files"* ]]; then exit 0; fi

echo "$error"

exit 1
