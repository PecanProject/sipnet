MATLAB .m files for post-processing of SIPNET output

Author: Bill Sacks
Date: 4/11/05


NOTE: My example calls to the various functions assume that the site climate file (e.g. niwots.clim) has been loaded into a variable named 'clim', the data (e.g. niwots.dat) has been loaded into a variable named 'dat', and the sipnet output (from a single forward run, e.g. niwots.out) has been loaded into a variable named 'out'.

dailySums.m:
	I don't use this much, but it could be useful for summing data by days (or by months, or years, or whatever). 

daysFromMonth.m:
	Helper function to get number of days in each month.

getCUP.m:
	Useful for finding the carbon uptake period for each year, as well as the annual NEE for each year for looking at the correlation between the two.
	e.g. [cup, annualNee] = getCUP(dat(:,2), clim(:,2), 1999, 2003, 2)

monthFromDay.m:
	Helper function to get month index for a given day of year.

monthlyMeans.m:
	I use this to generate monthly means of climate drivers, like air temperature.

	e.g. to find mean air temperature, split up by year, month, and day/night:
	divisions = (clim(:,8) > 0) + 1; % divide into day/night using PAR
	monthlyMeanTair = monthlyMeans(clim(:,6),clim(:,2),clim(:,3),divisions,clim(:,5))

monthlySums.m:
	I use this to generate monthly sums of fluxes and of climate drivers like precipitation.
	
	e.g. to find mean modeled nee, split up by year, month, and day/night:
	divisions = (clim(:,8) > 0) + 1; % divide into day/night using PAR
	monthlyNee = monthlySums(out(:,15), clim(:,2), clim(:,3), divisions)

plotYears.m:
	Plots data in a different color for each year, possibly smoothed.

	e.g. To plot modeled nee, with a 4-week (i.e. 56 half-daily points) smoother:
	fracDays = clim(:,3) + clim(:,4)/24;
	plotYears(out(:,15), fracDays, clim(:,2), 1999, 2003, 56, 2)
	
	Using a scaleFactor of 2 gives daily fluxes; a scaleFactor of 2 is appropriate for fluxes and other variables that of units of (something) day-1 (e.g. precip., PAR); for things like air temperature, a scaleFactor of 1 is appropriate

slidingMeanAllPtsCentered.m:
	Computes sliding mean of data, with given window size.
	meanData(i) is n-point mean around point i (n = window) (except at edges of vector, where we use a smaller window)

splitdata.m:
	Potentially useful for splitting data into n-length chunks.

splitdataI.m:
	Another way to split data... useful for reformatting results of spatially-explicit run (where first index of array is the location).