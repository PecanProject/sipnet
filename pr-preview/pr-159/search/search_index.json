{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SIPNET","text":"<p>SIPNET (Simplified Photosynthesis and Evapotranspiration Model) is an ecosystem model designed to efficiently simulate carbon and water dynamics. Originally developed for assimilation of eddy covariance flux data in forest ecosystems, current development is focused on representing carbon balance and GHG fluxes and agricultural management practices.</p> <p></p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li><code>gcc</code> or <code>clang</code> </li> <li><code>make</code></li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Clone the repository:    <pre><code>git clone https://github.com/PecanProject/sipnet.git\ncd sipnet\n</code></pre></li> <li>Build the SIPNET executable:    <pre><code> make\n</code></pre></li> <li>Change directory and run a test simulation:    <pre><code>cd tests/smoke/niwot\n../../../sipnet -i sipnet.in\n</code></pre></li> <li>Check the output:    <pre><code>cat niwot.out\n</code></pre></li> </ol>"},{"location":"#run-tests","title":"Run Tests","text":"<ul> <li>Unit tests:   <pre><code>make unit\n# or: make testbuild &amp;&amp; ./tools/run_unit_tests.sh\n</code></pre></li> <li>Smoke tests:   <pre><code>make smoke\n# or: ./tests/smoke/run_smoke.sh\n</code></pre></li> <li>Full tests (build + unit + smoke):   <pre><code>make test\n</code></pre></li> <li>Clean up test artifacts:   <code>bash   make testclean</code></li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation for SIPNET is published at pecanproject.github.io/sipnet, which is built using <code>mkdocs</code>.  See the Documentation section in the CONTRIBUTING page for more information about how to write and compile the documentation.</p> <p>Key pages:</p> <ul> <li>Model inputs: Input files and configuration.</li> <li>Model outputs: Output files and structure.</li> <li>Parameters: Model parameters and settings.</li> <li>Model structure: Overview of code organization.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>See the main Contributing and Code of Conduct pages for details on how to contribute to SIPNET.</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the BSD 3-Clause license. See LICENSE for more information.</p>"},{"location":"CHANGELOG/","title":"Change Log","text":"<p>All notable changes are kept in this file.  All changes made should be added to the section called <code>Unreleased</code>.  Once a new release is made this file will be updated to create a new <code>Unreleased</code> section for the next release.</p> <p>For more information about this file see also Keep a Changelog .</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":""},{"location":"CHANGELOG/#removed","title":"Removed","text":""},{"location":"CHANGELOG/#git-sha","title":"Git SHA","text":""},{"location":"CHANGELOG/#sipnet-200-sipnet-overhaul","title":"SIPNET 2.0.0 - \"SIPNET Overhaul\"","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<p>-Irrigation events (#26) - Changelog (#33) - Model structure and parameter documentation (#42) - Build docs and push to gh-pages (#41) - Add documentation website (pecanproject.github.io/sipnet) with automated builds (#53) - Handle planting &amp; harvest events(#55) - events.out file for agronomic event handling (#57) - Utility <code>tools/trim_first_chars.sh</code> to trim the first n characters from every row in a file, useful for updating old input files to remove location column - Expanded smoke test cases to better cover SIPNET modeling options (#109, #114) - Converted all compile-time switches not removed or hard-coded to be on into switches to run-time options (#114) - Added extensive documentation in code listing the source(s) that the code implements (#135) - Added python tool for comparing smoke test results with expected values (#142)</p>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed OOM issue when reading bad data (#38, #45)</li> <li>Event order checks no longer only compare to first record (#74, #77)</li> <li>Fixed long-standing bug wherein microbePulseEff was not set to 0 when MICROBES was off (#114)</li> <li>Fixed long-standing bug with missing rSoil flux calc when LITTER_POOL is on (#139)</li> <li>Fixed long-standing bug with missing frozen soil check in soilBreakdown when LITTER_POOL is on (#140)</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Reorganized codebase (#34, #37)</li> <li>Document &amp; combine <code>calclighteff</code> functions (#35)</li> <li>Deprecated: \"RUNTYPE\" is obsolete. Will be silently ignored if set to 'standard' or error if set to anything else. Runs in 'standard' mode by default.</li> <li>Deprecated: \"LOCATION\" is obsolete. Will be ignored with warning. (#92)</li> <li>Deprecated: All columns in *.param except for name and value. Will be ignored with warning. (#92)</li> <li>Deprecated: location and soilWetness columns in input climate files. If both are present, will be ignored with warning. (#92, #127)</li> <li>Changed: sipnet.out columns will be zero when relevant modes are off (e.g., litter, microbes) (#143)</li> <li>Changed: reorganized code in sipnet to better model fluxes-then-pool-updates flow (#154)</li> <li>Changed: sipnet.out format; it no longer has loc, litterWater or fPAR columns (#155)</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li>Removed many experimental sites, data, and executable code as part of reorg (#34, #37)</li> <li>Removed obsolete run types senstest and montecarlo and associated code (#69, #76)</li> <li>Removed obsolete estimate program and associated code (#70, #82)</li> <li>Removed multi-site support; in particular, output files no longer have a location column (#92)</li> <li>Removed or hard-codes 'on' many compile time switches (#114)</li> <li>Removed <code>SOIL_QUALITY</code> mode (#125)</li> <li>Removed <code>soilWetness</code> mode (#127)</li> <li>Removed obsolete model params; sipnet now warns on unknown params in the params file (#124)</li> </ul>"},{"location":"CHANGELOG/#git-sha_1","title":"Git SHA","text":"<p>[TBD]</p>"},{"location":"CHANGELOG/#sipnet-130-event-handler","title":"SIPNET 1.3.0 - \"Event Handler\"","text":"<p>v1.3.0 represents the initial development of support for agricultural management events.</p>"},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Introduced Event Handler infrastructure #23</li> <li>Add testing infrastructure.</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Code cleanup (including comment standardization and spelling corrections).</li> <li>Update Doxyfile</li> <li>Add <code>make help</code>.</li> </ul>"},{"location":"CHANGELOG/#git-sha_2","title":"Git SHA","text":"<p>8ff893e61d69d0374bdf0fa14d156fd621c40eb4</p>"},{"location":"CHANGELOG/#sipnet-121-add-license-and-minor-fixes","title":"SIPNET 1.2.1 - \"Add LICENSE and minor fixes\"","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Add BSD 3-Clause LICENSE file.</li> <li>Migrate documentation from Word to Markdown.</li> </ul>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Minor fixes prior to agricultural management implementation.</li> <li>Bug fix for output formatting (identified by @Qianyuxuan).</li> </ul>"},{"location":"CHANGELOG/#git-sha_3","title":"Git SHA","text":"<p>0c77ce863ac61113740c759dbe502a74e2d64edf</p>"},{"location":"CHANGELOG/#sipnet-120-fapar-assimilation","title":"SIPNET 1.2.0 - \"fAPAR assimilation\"","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>Modify fAPAR calculation to enable assimilation of MODIS satellite-derived fAPAR.</li> </ul>"},{"location":"CHANGELOG/#publications","title":"Publications","text":"<p>Zobitz, J.M., David J.P. Moore, Tristan Quaife, Bobby H. Braswell, Andrew Bergeson, Jeremy A. Anthony, and Russell K. Monson. 2014. \u201cJoint Data Assimilation of Satellite Reflectance and Net Ecosystem Exchange Data Constrains Ecosystem Carbon Fluxes at a High-Elevation Subalpine Forest.\u201d Agricultural and Forest Meteorology 195\u2013196 (September):73\u201388. https://doi.org/10.1016/j.agrformet.2014.04.011.</p>"},{"location":"CHANGELOG/#git-sha_4","title":"Git SHA","text":"<p>97a225956775035506f573a29c7022de8d7d269d</p>"},{"location":"CHANGELOG/#sipnet-110-roots-and-microbes","title":"SIPNET 1.1.0 - \"Roots and Microbes\"","text":"<p>Moore et al. (2008)</p> <ul> <li>Support joint CO2 and H2O assimilation.</li> </ul> <p>Zobitz et al. (2008)</p> <ul> <li>Add process-based soil respiration with microbes \"soil quality model\".</li> <li>Add fine and coarse root pools.</li> <li>Compare different model structures (base, soil quality, and roots).</li> <li>Calculate Transpiration using Ball Berry, initial implementation of and Penman-Monteith</li> </ul>"},{"location":"CHANGELOG/#publications_1","title":"Publications","text":"<p>Moore, David J.P., Jia Hu, William J. Sacks, David S. Schimel, and Russell K. Monson. 2008. \u201cEstimating Transpiration and the Sensitivity of Carbon Uptake to Water Availability in a Subalpine Forest Using a Simple Ecosystem Process Model Informed by Measured Net CO2 and H2O Fluxes.\u201d Agricultural and Forest Meteorology 148 (10): 1467\u201377. https://doi.org/10.1016/j.agrformet.2008.04.013.</p> <p>Zobitz, J. M., D. J. P. Moore, W. J. Sacks, R. K. Monson, D. R. Bowling, and D. S. Schimel. 2008. \u201cIntegration of Process-Based Soil Respiration Models with Whole-Ecosystem CO2 Measurements.\u201d Ecosystems 11 (2): 250\u201369. https://doi.org/10.1007/s10021-007-9120-1.</p>"},{"location":"CHANGELOG/#sipnet-100-sipnet-first-release","title":"SIPNET 1.0.0 - \"SIPNET First Release\"","text":"<p>The first release of SIPNET reflected a series of improvements over the original SIPNET model (Braswell et al., 2005). The model was developed by Bill Sacks and Dave Moore, with contributions from John Zobitz. The model was parameterized using data from the Harvard Forest flux tower using MCMC (Sacks et al., 2006). The model was designed to simulate the carbon and water cycles of a forest ecosystem at half-daily time steps.</p> <p>Braswell et al. (2005)</p> <ul> <li>Initial version of SIPNET.</li> <li>Half-daily time step with two vegetation carbon pools and one soil pool.</li> <li>MCMC parameter fitting with observations from Harvard forest flux tower.</li> </ul> <p>Sacks et al. (2006)</p> <ul> <li>More complex water routine incorporating evaporation and snow pack.</li> <li>Evergreen leaf phenology.</li> </ul> <p>Sacks et al. (2007): \"Better Respiration\"</p> <ul> <li>Shut down photosynthesis and foliar respiration when soil temperature &lt; threshold.</li> <li>Partition autotrophic and heterotrophic respiration.</li> </ul>"},{"location":"CHANGELOG/#git-sha_5","title":"Git SHA","text":"<p>47d6546e245384dbda7e981a3bc8b729d4f756fc</p>"},{"location":"CHANGELOG/#publications_2","title":"Publications","text":"<p>Braswell, Bobby H., William J. Sacks, Ernst Linder, and David S. Schimel. 2005. \u201cEstimating Diurnal to Annual Ecosystem Parameters by Synthesis of a Carbon Flux Model with Eddy Covariance Net Ecosystem Exchange Observations.\u201d Global Change Biology 11 (2): 335\u201355. https://doi.org/10.1111/j.1365-2486.2005.00897.x.</p> <p>Sacks, William J., David S. Schimel, and Russell K. Monson. 2007. \u201cCoupling between Carbon Cycling and Climate in a High-Elevation, Subalpine Forest: A Model-Data Fusion Analysis.\u201d Oecologia 151 (1): 54\u201368. https://doi.org/10.1007/s00442-006-0565-2.</p> <p>Sacks, William J., David S. Schimel, Russell K. Monson, and Bobby H. Braswell. 2006. \u201cModel\u2010data Synthesis of Diurnal and Seasonal CO2 Fluxes at Niwot Ridge, Colorado.\u201d Global Change Biology 12 (2): 240\u201359. https://doi.org/10.1111/j.1365-2486.2005.01059.x.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to SIPNET","text":"<p>We welcome contributions. This page is the one\u2011stop guide for developers.</p> <p>All contributors must follow the project Code of Conduct.</p>"},{"location":"CONTRIBUTING/#developer-quickstart","title":"Developer Quickstart","text":"<ul> <li>Clone the repository:    <pre><code>git clone git@github.com:PecanProject/sipnet\ncd sipnet\n</code></pre></li> <li>Setup (once per clone, described below):   <pre><code>tools/setup.sh\n</code></pre></li> <li>Build:   <pre><code>make\n</code></pre></li> <li>Run a sample:   <pre><code>cd tests/smoke/niwot\n../../../sipnet -i sipnet.in\n</code></pre></li> </ul> <p>Setup Script The <code>tools/setup.sh</code> script verifies that Python\u202f\u2265\u202f3.8 is available and that <code>clang-format</code>, <code>clang-tidy</code>, and <code>git clang-format</code> are installed. Automatically installs <code>clang</code> tools on macOS and prints installation instructions for Ubuntu/Debian. Then copies the clang pre\u2011commit hook into <code>.git/hooks</code> so that code formatting is checked on every commit.</p> <p>Note\u202f\u2013\u202frunning <code>tools/setup.sh</code>  is not necessary for documentation\u2011only edits, but it will save you time whenever you touch C/C++ code.</p>"},{"location":"CONTRIBUTING/#github-workflow","title":"GitHub Workflow","text":""},{"location":"CONTRIBUTING/#branches","title":"Branches","text":"<p>The <code>master</code> branch is the default branch for SIPNET. Development should be done in feature branches. Feature branches should be named to clearly indicate the purpose, and may be combined with an associated issue, e.g. <code>ISSUE#-feature-name</code>.</p>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>Pull requests should be made from feature branches to the <code>master</code> branch. </p> <p>Pull request descriptions should include a brief summary of the changes and links to related issues. </p> <p>Expectations for merging: - Pass all unit and integration tests.  - Approved by at least one other developer before being merged. - Include updates and additions to    - Documentation   - Tests   - CHANGELOG.md   - For new model features related to the structure, remove relevant <code>\\fraktur</code> font formatting from <code>docs/model-structure.md</code> to indicate that the feature has been implemented.</p> <p>Pull requests must pass all required checks to be merged into master, including the code format and style checks described below.</p>"},{"location":"CONTRIBUTING/#code-format-style","title":"Code Format &amp; Style","text":"<p>We follow the standard LLVM/Clang formatting rules.\u202fFormatting is automated with a pre-commit hook, so you wil rarely have to think about them.</p> <p>To set up formatting and static analysis checks:</p> <ol> <li> <p>Run the setup script once (see Setup above).    It installs a pre\u2011commit hook that blocks any commit whose C/C++    files are not already formatted.</p> </li> <li> <p>If the hook stops your commit, run:    <pre><code># format only what you just staged\ngit clang-format\n# restage fixes and commit again\ngit add -u\ngit commit\n</code></pre> If <code>git clang-format</code> fails because not all changes are staged (likely a <code>git commit -a</code> command), either <code>git add</code> all the changes, or try <code>git clang-format -f</code> to reformat all modified files</p> </li> <li> <p>clang\u2011tidy static analysis runs automatically in CI.     If the bot leaves comments, adjust your code as instructed and push.</p> <p>To run <code>clang-tidy</code> manually before committing or pushing changes, use the following command from the project root:</p> <pre><code># Replace &lt;path/to/filename.c&gt; with the file you want to check\nclang-tidy &lt;path/to/filename.c&gt;\n</code></pre> </li> </ol> <p>The hook and CI will tell you what to fix.</p> <p>If a commit is blocked, format staged changes:   <pre><code>git clang-format\ngit add -u &amp;&amp; git commit\n</code></pre>   To reformat all modified files: <code>git clang-format -f</code>. - Optional local static analysis:   <pre><code>clang-tidy path/to/file.c\n</code></pre></p>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<ul> <li>Build API docs (Doxygen) and site (MkDocs):   <pre><code>make document\n</code></pre></li> <li> <p>Live preview while editing docs:   <pre><code>pip install mkdocs mkdocs-material pymdown-extensions\nmkdocs serve\n# open http://127.0.0.1:8000/\n</code></pre>   Update <code>mkdocs.yml</code> if you add/move pages.</p> </li> <li> <p>Build API docs (Doxygen) and site (MkDocs):   <pre><code>make document\n</code></pre>   Outputs: <code>docs/api/</code> and <code>site/</code>.</p> </li> <li>Live preview while editing docs:   <pre><code>pip install mkdocs mkdocs-material pymdown-extensions\nmkdocs serve\n# open http://127.0.0.1:8000/\n</code></pre>   Update <code>mkdocs.yml</code> if you add/move pages.</li> </ul>"},{"location":"CONTRIBUTING/#build","title":"Build","text":"<pre><code>make\n</code></pre> <ul> <li>See the project README.md for quick start. Use <code>make help</code> for all targets.</li> </ul>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>New features require tests.</p> <ul> <li>Unit tests:   <pre><code>make unit\n# or: make testbuild &amp;&amp; ./tools/run_unit_tests.sh\n</code></pre></li> <li>Smoke tests:   <pre><code>make smoke\n</code></pre></li> <li> <p>Full check (unit + smoke):   <pre><code>make test\n</code></pre></p> </li> <li> <p>Clean up unit test artifacts:   <pre><code>make testclean\n</code></pre></p> </li> </ul> <p>Per\u2011suite runners live under <code>tests/sipnet/*</code>: <pre><code>make -C tests/sipnet/test_events_infrastructure run\n</code></pre></p>"},{"location":"CONTRIBUTING/#releases","title":"Releases","text":"<ul> <li>Use Semantic Versioning v2 for SIPNET releases. </li> <li>Tag the git commit associated with the release <code>vX.Y.Z</code>.</li> <li>Update versions in:</li> <li><code>CITATION.cff</code></li> <li><code>src/sipnet/version.h</code></li> <li><code>docs/CHANGELOG.md</code></li> <li><code>docs/Doxyfile</code> (<code>PROJECT_NUMBER</code>)</li> <li>Run tests (<code>make test</code>).</li> <li>Publish the GitHub release; include <code>docs/CHANGELOG.md</code> content in release notes.</li> </ul>"},{"location":"model-structure/","title":"Model Specification","text":""},{"location":"model-structure/#model-structure","title":"Model Structure","text":"<p>Goal: simplified biogeochemical model that is capable of simulating GHG balance, including soil carbon, \\(CO_2\\), \\(CH_4\\), and \\(N_2O\\) flux. Key validation criteria is the ability to correctly capture the response of these pools and fluxes to changes in agronomic management practices, both current and future. </p>"},{"location":"model-structure/#design-approach","title":"Design approach:","text":"<p>Start as simple as possible, add complexity as needed. When new features are considered, they should be evaluated alongside other possible model improvements that have been considered, and the overall list of project needs.</p> <p>Model state is updated in the following order:</p> <ol> <li>Calculate fluxes \u2014 compute the model's native fluxes</li> <li>Process events \u2014 convert events to per\u2011day fluxes and accumulate into fluxes.</li> <li>Update pools \u2014 pools are updated from the accumulated fluxes and pool\u2011specific updates.</li> </ol>"},{"location":"model-structure/#notes-on-notation","title":"Notes on notation:","text":"<p>Fluxes are denoted by \\(F\\), except that respiration is denoted by \\(R\\) following convention and previous descriptions of SIPNET.</p> <p>Parameters and other information can be found in the Parameters documentation. </p>"},{"location":"model-structure/#scope","title":"Scope","text":"<p>This document provides an overview of the SIPNET model\u2019s structure. It was written to  - Consolidate the descriptions from multiple papers (notably Braswell et al 2005 and Zobitz et al 2008).  - Provide enough detail to support the addition of agronomic events, CH4, and N2O fluxes. - Focus on features currently in regular use.</p> <p>There are multiple ways to configure the model structure, and not all model structures are listed, notably the litter quality model. </p> <p>We aim to extend the scope of this document to be more comprehensive of the regularly used features.</p>"},{"location":"model-structure/#mathfrakproposed-features","title":"\\(\\mathfrak{Proposed \\ Features}\\)","text":"<p>Proposed features are indicated using the using \\(\\mathfrak{Fraktur Font}\\). Where an entire section is new, it is only used in the section heading. Otherwise, it is used for terms within equations. As these features are implemented, the <code>\\mathfrak{}</code> commands should be removed.</p>"},{"location":"model-structure/#carbon-dynamics","title":"Carbon Dynamics","text":""},{"location":"model-structure/#litter-pool","title":"Litter Pool","text":"<p>SIPNET can be run with or without a separate litter pool (LITTER_POOL=1 or 0).  Equations in this document assume LITTER_POOL=1 unless otherwise noted.</p> <p>When LITTER_POOL=0: - Carbon fluxes that would go to the litter pool (\\(F^C_\\text{litter}\\)) are routed directly to the soil carbon pool - All decomposition occurs in the soil pool - This affects carbon routing from harvest events, organic matter additions, plant senescence, and other processes involving \\(F^C_\\text{litter}\\)</p>"},{"location":"model-structure/#maximum-photosynthetic-rate","title":"Maximum Photosynthetic Rate","text":"\\[ \\text{GPP}_{\\text{max}} = A_{\\text{max}} \\cdot A_d + R_{leaf,0} \\tag{Braswell A6}\\label{eq:A6} \\] <p>The daily maximum gross photosynthetic rate  \\((\\text{GPP}_{\\text{max}})\\) represents the maximum potential GPP under optimal conditions. It is modeled as the leaf-level maximum net assimilation rate  \\((A_{\\text{max}})\\) multiplied by a scaling factor  \\((A_d)\\), plus foliar maintenance respiration at optimum temperature  \\((R_{\\text{leaf},0})\\). The scaling factor \\(A_d\\) accounts for daily variation in photosynthesis, representing the average fraction of \\(A_{\\text{max}}\\) that is realized over the course of a day. </p>"},{"location":"model-structure/#potential-photosynthesis","title":"Potential Photosynthesis","text":"\\[ \\text{GPP}_{\\text{pot}} = \\text{GPP}_{\\text{max}} \\cdot    D_{\\text{temp}} \\cdot    D_{\\text{VPD}} \\cdot    D_{\\text{light}}    \\tag{Braswell A7}\\label{eq:A7} \\] <p>The potential gross primary production  \\((\\text{GPP}_{\\text{pot}})\\) is calculated by reducing \\(\\text{GPP}_{\\text{max}}\\) by temperature, vapor pressure deficit, and light.</p>"},{"location":"model-structure/#adjusted-gross-primary-production","title":"Adjusted Gross Primary Production","text":"\\[ \\text{GPP} = \\text{GPP}_{\\text{pot}} \\cdot D_{\\text{water}} \\tag{Braswell A17}\\label{eq:A17} \\] <p>The total adjusted gross primary production (GPP) is the product of potential GPP  \\((\\text{GPP}_{\\text{pot}})\\) and the water stress factor \\(D_{\\text{water,}A}\\).</p> <p>The water stress factor \\(D_{\\text{water,}A}\\) is defined in equation \\eqref{eq:A16} as the ratio of actual to potential transpiration, and therefore couples GPP to transpiration by reducing GPP.</p>"},{"location":"model-structure/#plant-growth","title":"Plant Growth","text":"\\[ \\text{NPP} = \\text{GPP} - R_A \\tag{1} \\label{eq:npp} \\] <p>Net primary productivity  \\((\\text{NPP})\\) is the total carbon gain of plant biomass. NPP is allocated to plant biomass pools in proportion to their allocation parameters \\(\\alpha_i\\).</p> \\[ \\text{NPP}=\\sum_{1}^{i} \\frac{dC_{\\text{plant,}i}}{dt} \\tag{2} \\label{eq:npp_summ} \\] \\[\\small i \\in \\{\\text{leaf, wood, fine root, coarse root}\\}\\] <p>Note that \\(\\alpha_i\\) are specified input parameters and \\(\\sum_i{\\alpha_i} = 1\\).</p> \\[ dC_{\\text{plant,}i} = \\text{NPP} \\cdot a_i \\mathfrak{-    F^C_{\\text{harvest,removed,}i}} - F^C_{\\text{litter,}i}   \\tag{Zobitz 3}\\label{eq:Z3} \\] <p>This results in the following constraints: - In the case of annuals, all biomass is either harvested and removed or added to litter pools. \\(F^C_{\\text{harvest,removed,}i}\\) is calculated by \\eqref{eq:harvest}. - In the case of perennials, a fraction of the biomass remains except at the end of the perennial's life.</p> \\[\\mathfrak{ F^C_{\\text{litter,}i} + F^C_{\\text{harvest,removed,}i} = \\begin{cases} 1 &amp; \\text{annuals} \\\\ \\leq 1 &amp; \\text{perennials} \\end{cases} }\\]"},{"location":"model-structure/#plant-death","title":"Plant Death","text":"<p>Plant death is implemented as a harvest event with the fraction of biomass transferred to litter, \\(f_{\\text{harvest,transfer,}i}\\) set to 1.</p>"},{"location":"model-structure/#wood-carbon","title":"Wood Carbon","text":"\\[ \\frac{dC_\\text{wood}}{dt} = \\alpha_\\text{wood}\\cdot\\text{NPP} - F^C_\\text{litter,wood} \\tag{Braswell A1}\\label{eq:A1} \\] <p>Change in plant wood carbon  \\((C_W)\\) over time is determined by the fraction of net primary productivity allocated to wood, and wood litter production  \\((F^C_\\text{litter,wood})\\).</p>"},{"location":"model-structure/#leaf-carbon","title":"Leaf Carbon","text":"\\[ \\frac{dC_\\text{leaf}}{dt} = L - F^C_\\text{litter,leaf} \\tag{Braswell A2}\\label{eq:A2} \\] <p>The change in plant leaf carbon  \\((C_\\text{leaf})\\) over time is given by the balance of leaf production  \\((L)\\) and leaf litter production  \\((F^C_\\text{litter,leaf})\\).</p>"},{"location":"model-structure/#leaf-maintenance-respiration","title":"Leaf Maintenance Respiration","text":"\\[ R_\\text{leaf,opt} = k_\\text{leaf} \\cdot A_{\\text{max}} \\cdot C_\\text{leaf} \\tag{Braswell A5}\\label{eq:A5} \\] <p>Where \\(R_\\text{leaf,opt}\\) is leaf maintenance respiration at \\(T_\\text{opt}\\), proportional to the maximum photosynthetic rate \\(A_{\\text{max}}\\) with a scaling factor \\(k_\\text{leaf}\\) multiplied by the mass of leaf \\(C_\\text{leaf}\\).</p> \\[ R_\\text{leaf} = R_\\text{leaf,opt} \\cdot D_{\\text{temp,Q10}} \\tag{Braswell A18a}\\label{eq:A18a} \\] <p>Actual foliar respiration  \\((R_\\text{leaf})\\) is modeled as a function of the foliar respiration rate  \\((R_\\text{leaf,opt})\\) at optimum temperature of leaf respiration \\(T_\\text{opt}\\) and the \\(Q_{10}\\) temperature sensitivity factor.</p>"},{"location":"model-structure/#wood-maintenance-respiration","title":"Wood Maintenance Respiration","text":"\\[ R_\\text{wood} = K_\\text{wood} \\cdot C_\\text{wood} \\cdot D_{\\text{temp,Q10}_v} \\tag{Braswell A19}\\label{eq:A19} \\] <p>Wood maintenance respiration \\((R_m)\\) depends on the wood carbon content  \\((C_\\text{wood})\\),  a scaling constant  \\((k_\\text{wood})\\), and the temperature sensitivity scaling function \\(D_{\\text{temp,Q10}_v}\\).</p>"},{"location":"model-structure/#litter-carbon","title":"Litter Carbon","text":"<p>The change in the litter carbon pool over time is defined by the input of new litter and the loss to decomposition:</p> \\[ \\frac{dC_\\text{litter}}{dt} = F^C_\\text{litter} - F^C_{\\text{decomp}} \\] <p>Where \\(F^C_\\text{litter}\\) is the carbon flux from plant biomass into the litter pool through senescence and harvest \\eqref{eq:litter_flux}. \\(F^C_{\\text{decomp,litter}}\\) is the total carbon flux lost from the litter pool due to decomposition and includes both transfer and decomposition \\eqref{eq:decomp_carbon}.</p> <p>The flux of carbon from the plant to the litter pool is the sum litter produced through senescence, transfer of any biomass pools during harvest, and organic matter ammendments:</p> \\[ F^C_\\text{litter} =    \\sum_{i} K_{\\text{plant,}i} \\cdot C_{\\text{plant,}i} +   \\mathfrak{     \\sum_{i} F^C_{\\text{harvest,transfer,}i} +   F^C_\\text{fert,org}   }    \\tag{3}\\label{eq:litter_flux} \\] \\[\\small i \\in \\{\\text{leaf, wood, fine root, coarse root}\\}\\] <p>Where \\(K\\) is the turnover rate of plant pool \\(i\\) that controls the rate at which plant biomass is transferred to litter.</p> <p>The decomposition flux from litter carbon is divided into heterotrophic respiration and carbon transfer to soil:</p> \\[ F^C_{\\text{decomp}} = R_{H,\\text{litter}} + F^C_{\\text{soil}} \\tag{4}\\label{eq:decomp_carbon} \\] <p>Where \\(R_{H_{\\text{litter}}}\\) is heterotrophic respiration from litter \\eqref{eq:rh_litter}, and \\(F^C_{\\text{soil}}\\) is the carbon transfer from the litter pool to the soil \\eqref{eq:soil_carbon}. This partitioning is based on the fraction of litter that is respired, \\(f_{R_H}\\).</p> \\[ R_{H_{\\text{litter}}} = f_{R_H} \\cdot K_\\text{litter} \\cdot C_\\text{litter} \\cdot D_{\\text{temp}} \\cdot D_{\\text{water}R_H} \\tag{5}\\label{eq:rh_litter} \\] \\[ F^C_{\\text{soil}} = (1 - f_{R_H}) \\cdot K_\\text{litter} \\cdot C_\\text{litter} \\cdot D_{\\text{temp}} \\cdot D_{\\text{water}R_H} \\tag{6}\\label{eq:soil_carbon} \\] <p>The rate of decomposition is a function of the litter carbon content and the decomposition rate \\(K_{\\text{litter}}\\) modified by temperature and moisture factors. \\(f_{R_H}\\) is the fraction of litter carbon that is respired.</p>"},{"location":"model-structure/#soil-carbon","title":"Soil Carbon","text":"\\[ \\frac{dC_\\text{soil}}{dt} = F^C_{\\text{soil}} - R_{H_\\text{soil}} \\tag{Braswell A3}\\label{eq:A3} \\] <p>The change in the SOC pool over time \\(\\frac{dC_\\text{soil}}{dt}\\) is determined by the addition of litter carbon and the loss of carbon to heterotrophic respiration. This model assumes no loss of SOC to leaching or erosion.</p>"},{"location":"model-structure/#heterotrophic-respiration-c_textsoillitter-rightarrow-co_2","title":"Heterotrophic Respiration \\((C_\\text{soil,litter} \\rightarrow CO_2)\\)","text":"<p>Total heterotrophic respiration is the sum of respiration from soil and litter pools:</p> \\[ R_{H} = f_{R_H} \\cdot    \\left(\\sum_j  K_j \\cdot C_j      \\right) \\cdot      D_{\\text{temp}} \\cdot D_{\\text{water,}R_H} \\cdot D_{CN} \\mathfrak{\\cdot D_{\\text{tillage}}}      \\tag{7}\\label{eq:rh} \\] \\[\\small j \\in \\{\\text{soil, litter}\\}\\] <p>Where heterotrophic respiration, \\(R_H\\), is a function of each carbon pool \\(C_j\\) and its associated decomposition rate \\(K_{C_j}\\) adjusted by the fraction allocated to respiration, \\(f_{R_H}\\), and the temperature, moisture, tillage, and CN dependency  \\((D_\\star)\\) functions.</p>"},{"location":"model-structure/#frakmethane-production-c-rightarrow-ch_4","title":"\\(\\frak{Methane \\ Production \\ (C \\rightarrow CH_4)}\\)","text":"\\[ F^C_\\mathit{CH_4} = \\left(\\sum_{j} K_{CH_4,j} \\cdot C_\\text{j}\\right) \\cdot D_\\mathrm{water, O_2} \\cdot D_\\text{temp}  \\tag{8}\\label{eq:ch4} \\] \\[\\small j \\in \\{\\text{soil, litter}\\}\\] <p>The calculation of methane flux  \\((F^C_{CH_4})\\) is analagous to to that of \\(R_H\\). It uses the same carbon pools as substrate and temperature dependence but has specific rate parameters  \\((K_{\\mathit{CH_4,}j})\\), a moisture dependence function based on oxygen availability, and no direct dependence on tillage.</p>"},{"location":"model-structure/#frakcarbonnitrogen-ratio-dynamics-cn","title":"\\(\\frak{Carbon:Nitrogen \\ Ratio \\ Dynamics (CN)}\\)","text":"<p>The carbon and nitrogen cycle are tightly coupled by the C:N ratios of plant and organic matter pools. The C:N ratio of plant biomass pools is fixed, while the C:N ratio of soil organic matter and litter pools is dynamic.</p>"},{"location":"model-structure/#frakfixed-plant-cn-ratios","title":"\\(\\frak{Fixed \\ Plant \\ C:N \\ Ratios}\\)","text":"<p>Plant biomass pools have a fixed CN ratio and are thus stoichiometrically coupled to carbon:</p> \\[ N_i = \\frac{C_i}{CN_{i}} \\tag{9}\\label{eq:cn_stoich} \\] \\[\\small i \\in \\{\\text{leaf, wood, fine root, coarse root}\\}\\] <p>Where \\(i\\) is the leaf, wood, fine root, or coarse root pool. This relationship applies to both pools \\(C,N\\) and fluxes  \\((F^C, F^N)\\).</p> <p>Soil organic matter and litter pools have dynamic CN that is determined below.</p>"},{"location":"model-structure/#frakdynamic-soil-organic-matter-and-litter-cn-ratios","title":"\\(\\frak{Dynamic \\ Soil  \\ Organic \\ Matter \\ and \\ Litter \\ C:N \\ Ratios}\\)","text":"<p>The change in the soil C:N ratio over time of soil and litter pools depends on the rate of change of carbon and nitrogen in the pool, normalized by the total nitrogen in the pool. This makes sense as it captures how changes in carbon and nitrogen affect their ratio.</p> \\[ \\frac{dCN_{\\text{j}}}{dt} = \\frac{1}{N_{\\text{j}}} \\left( \\frac{dC_{\\text{j}}}{dt} - CN_{\\text{j}} \\cdot \\frac{dN_{\\text{j}}}{dt} \\right) \\tag{10}\\label{eq:cn} \\] \\[\\small j \\in \\{\\text{soil, litter}\\}\\]"},{"location":"model-structure/#frakcn-dependency-function-d_cn","title":"\\(\\frak{C:N \\ Dependency \\ Function \\ (D_{CN})}\\)","text":"<p>To represent the influence of substrate quality on decomposition rate, we add a simple dependence function \\(D_{CN}\\).</p> \\[   D_{CN} = \\frac{1}{1+k_CN \\cdot CN} \\tag{11}\\label{eq:cn_dep} \\] <p>Where \\(k_CN\\) is a scaling parameter that controls the sensitivity of decomposition rate to C:N ratio. This parameter represents the half-saturation constant of the Michaelis-Menten equation.</p>"},{"location":"model-structure/#fraknitrogen-dynamics-fracdndt","title":"\\(\\frak{Nitrogen \\ Dynamics (\\frac{dN}{dt})}\\)","text":""},{"location":"model-structure/#frakplant-biomass-nitrogen","title":"\\(\\frak{Plant \\ Biomass \\ Nitrogen}\\)","text":"<p>Similar to the stoichiometric coupling of litter fluxes, the change in plant biomass N over time is stoichiometrically coupled to plant biomass C:</p> \\[   \\frac{dN_{\\text{plant,}i}}{dt} = \\frac{dC_{\\text{plant,}i}}{dt} / CN_{\\text{plant,}i} \\tag{12}\\label{eq:plant_n} \\] \\[\\small i \\in \\{\\text{leaf, wood, fine root, coarse root}\\}\\]"},{"location":"model-structure/#fraklitter-nitrogen","title":"\\(\\frak{Litter \\ Nitrogen}\\)","text":"<p>The change in litter nitrogen over time, \\(N_\\text{litter}\\) is determined by inputs including leaf and wood litter, nitrogen in organic matter amendments, and losses to mineralization:</p> \\[   \\frac{dN_{\\text{litter}}}{dt} =    \\sum_{i} F^N_{\\text{litter,}i} +   F^N_\\text{fert,org} -    F^N_\\text{litter,min} \\tag{13}\\label{eq:litter_dndt} \\] \\[\\small i \\in \\{\\text{leaf, wood, fine root, coarse root}\\}\\] <p>The flux of nitrogen from living biomass to the litter pool is proportional to the carbon content of the biomass, based on the C:N ratio of the biomass pool \\eqref{eq:cn_stoich}. Similarly, nitrogen from organic matter amendments is calculated from the carbon content and the C:N ratio of the inputs.</p>"},{"location":"model-structure/#fraksoil-organic-nitrogen","title":"\\(\\frak{Soil \\ Organic \\ Nitrogen}\\)","text":"\\[   \\frac{dN_\\text{org,soil}}{dt} =     F^N_\\text{litter} -    F^N_\\text{soil,min} \\tag{14}\\label{eq:org_soil_dndt} \\] <p>The change in nitrogen pools in this model is proportional to the ratio of carbon to nitrogen in the pool. Equations for the evolution of soil and litter CN are below.</p>"},{"location":"model-structure/#fraksoil-mineral-nitrogen-fn_textmin","title":"\\(\\frak{Soil \\ Mineral \\ Nitrogen \\ F^N_\\text{min}}\\)","text":"<p>Change in the mineral nitrogen pool over time is determined by inputs from mineralization and fertilization, and losses to volatilization, leaching, and plant uptake:</p> \\[   \\frac{dN_\\text{min}}{{dt}} =    F^N_\\text{litter,min} +   F^N_\\text{soil,min} +   F^N_\\text{fix} +     F^N_\\text{fert,min} -    F^N_\\mathrm{vol} -    F^N_\\text{leach} -    F^N_\\text{uptake}    \\tag{15}\\label{eq:mineral_n_dndt} \\] <p>Mineralization, fertilization, and fixation add to the mineral nitrogen pool. Losses include mineralization, volatilization, leaching, and plant uptake, described below:</p>"},{"location":"model-structure/#frakn-mineralization-fn_textmin","title":"\\(\\frak{N \\ Mineralization \\ (F^N_\\text{min})}\\)","text":"<p>Total nitrogen mineralization is proportional to the total heterotrophic respiration from soil and litter pools, divided by the C:N ratio of the pool. The effects of temperature, moisture, tillage, and C:N ratio on mineralization rate are captured in the calculation of \\(R_\\text{H}\\).</p> \\[   F^N_\\text{min} = \\sum_j \\left( \\frac{R_{H\\text{j}}}{CN_{\\text{j}}} \\right) \\tag{16}\\label{eq:n_min} \\] \\[\\small j \\in \\{\\text{soil, litter}\\}\\]"},{"location":"model-structure/#fraknitrogen-volatilization-fn_textvol-n_textminsoil-rightarrow-n_2o","title":"\\(\\frak{Nitrogen \\ Volatilization \\ F^N_\\text{vol}: (N_\\text{min,soil} \\rightarrow N_2O)}\\)","text":"<p>The simplest way to represent \\(N_2O\\) flux is as a proportion of the mineral N pool \\(N_\\text{min}\\) or the N mineralization rate \\(F^N_{min}\\). For example, CLM-CN and CLM 4.0 represent \\(N_2O\\) flux as a proportion of \\(N_\\text{min}\\) (Thornton et al 2007, TK-ref CLM 4.0). By contrast, Biome-BGC (Golinkoff et al 2010; Thornton and Rosenbloom, 2005 and https://github.com/bpbond/Biome-BGC, Golinkoff et al 2010; Thornton and Rosenbloom, 2005) represents \\(N_2O\\) flux as a proportion of the N mineralization rate. </p> <p>Because we expect \\(N_2O\\) emissions will be dominated by fertilizer N inputs, we will start with the \\(N_\\text{min}\\) pool size approach. This approach also has the advantage of accounting for reduced \\(N_2O\\) flux when N is limiting (Zahele and Dalmorech 2011).</p> <p>A new fixed parameter \\(K_\\text{vol}\\) will represent the proportion of \\(N_\\text{min}\\) that is volatilized as \\(N_2O\\).</p> \\[ F^N_\\mathrm{vol} = K_\\text{vol} \\cdot N_\\text{min} \\cdot D_{\\text{temp}} \\cdot D_{\\text{water}R_H} \\tag{17}\\label{eq:n_vol} \\]"},{"location":"model-structure/#fraknitrogen-leaching-fn_textleach","title":"\\(\\frak{Nitrogen \\ Leaching \\ F^N_\\text{leach}}\\)","text":"\\[ F^N_\\text{leach} = N_\\text{min} \\cdot F^W_{drainage} \\cdot f_{N leach} \\tag{18}\\label{eq:n_leach} \\] <p>Where \\(f^N_\\text{leach}\\) is the fraction of \\(N_{min}\\) in soil that is available to be leached, \\(F^W_{drainage}\\) is drainage.</p>"},{"location":"model-structure/#fraknitrogen-fixation-fn_textfix","title":"\\(\\frak{Nitrogen \\ Fixation \\ F^N_\\text{fix}}\\)","text":"<p>The rate at which N is fixed is a function of the NPP of the plant and a fixed parameter \\(K_\\text{fix}\\), and is modified by temperature.</p> <p>For nitrogen fixing plants, rates of symbiotic nitrogen fixation are assumed to be driven by plant growth, and also depend on temperature.</p> \\[ F^N_\\text{fix} = K_\\text{fix} \\cdot NPP  \\cdot D_{\\text{temp}} \\tag{19}\\label{eq:n_fix} \\] <p>Nitrogen fixation is represented by adding fixed nitrogen directly to the soil mineral nitrogen pool. This is a reasonable first approximation, consistent with the simplicity of the nitrogen limitation model where limitation only occurs when nitrogen demand exceeds supply. </p> <p>For nitrogen-fixing plants, most of the fixed nitrogen is directly used by the plant. It would be more complicated to model this by splitting, which could include splitting the fixed N into soil and plant pools and then meeting a portion of plant N demand with this flux.</p>"},{"location":"model-structure/#frakplant-nitrogen-uptake-fn_textuptake","title":"\\(\\frak{Plant \\ Nitrogen \\ Uptake \\ F^N_\\text{uptake}}\\)","text":"<p>Plant N demand is the amount of N required to support plant growth. This is calculated as the sum of changes in plant N pools:</p> \\[ F^N_\\text{uptake}=\\frac{dN_\\text{plant}}{dt} = \\sum_{i} \\frac{dN_{\\text{plant,}i}}{dt} \\tag{20}\\label{eq:plant_n_demand} \\] \\[\\small i \\in \\{\\text{leaf, wood, fine root, coarse root}\\}\\] <p>Each term in the sum is calculated according to equation \\eqref{eq:plant_n}.</p>"},{"location":"model-structure/#fraknitrogen-limitation-indicator-function-mathfraki_textn-limit","title":"\\(\\frak{Nitrogen \\ Limitation \\ Indicator \\ Function \\mathfrak{I_{\\text{N limit}}}}\\)","text":"<p>What happens when plant N demand exceeds available N? This is N limitation, a challenging process to represent in biogeochemical models.</p> <p>The initial approach to representing N limitation in SIPNET will be simple, and the primary motivation for implementing this is to avoid mass imbalance. First we will identify the presence of nitrogen limitation with an indicator variable:</p> \\[ I_{\\text{N limit}} = \\begin{cases} 1, &amp; \\text{if } \\frac{dN_\\text{plant}}{dt} \\leq N_{\\text{min}} \\\\ 0, &amp; \\text{if } \\frac{dN_\\text{plant}}{dt} &gt; N_{\\text{min}} \\end{cases} \\tag{21}\\label{eq:n_limit} \\] <p>When \\(I=0\\), SIPNET will throw a warning and increase autotrophic respiration to \\(R_A=GPP\\) to stop plant growth and associated N uptake:</p> \\[ R_A = \\max(R_A, I_{\\text{N limit}} \\cdot GPP) \\tag{22}\\label{eq:n_limit_ra} \\] <p>This will effectively stop plant growth and N uptake when there there is insufficient N.</p> <p>We do expect N limitation to occur, including in vineyards and woodlands, but we assume that effect of nitrogen limitation on plant growth will have a relatively smaller impact on GHG budgets at the county and state scales. This is because nitrogen limitation should be rare in California's intensively managed croplands because the cost of N fertilzer is low compared to the impact of N limitation on crop yield.</p> <p>If this scheme is too simple, we can adjust either the conditions under which N limitation occurs or develop an N dependency function based on the balance between plant N demand and N availability.</p>"},{"location":"model-structure/#water-dynamics","title":"Water Dynamics","text":""},{"location":"model-structure/#soil-water-storage","title":"Soil Water Storage","text":"\\[ \\begin{aligned} \\frac{dW_{\\text{soil}}}{dt} &amp;=    (1 - f_{\\text{intercept}})\\,F^W_{\\text{precip}}   + F^W_{\\text{irrig,soil}}   - F^W_{\\text{drainage}}   - F^W_{\\text{trans}} \\end{aligned} \\tag{Braswell A4}\\label{eq:A4} \\] <p>The term \\((1-f_{\\text{intercept}})F^W_{\\text{precip}}\\) is the portion of gross precipitation that reaches the soil (i.e. infiltration from precipitation). Intercepted water (fraction \\(f_{\\text{intercept}}\\) of precipitation or canopy\u2011applied irrigation) is assumed to evaporate the same day and therefore never enters \\(W_{\\text{soil}}\\) and does not appear in \\eqref{eq:A4}. \\(F^W_{\\text{trans}}\\) here is identical to \\(F^W_{\\text{transpiration}}\\) used elsewhere.</p>"},{"location":"model-structure/#drainage","title":"Drainage","text":"<p>Under well-drained conditions, drainage occurs when soil water content \\((W_{\\text{soil}})\\) exceeds the soil water holding capacity  \\((W_{\\text{WHC}})\\). Beyond this point, additional water drains off at a rate controlled by the drainage parameter \\(f_{\\text{drain}}\\) defined as the fraction of soil water that can be removed in one day. For well drained soils, this \\(f_{\\text{drain}}=1\\). Setting \\(f_{\\text{drain}}&lt;1\\) reduces the rate of drainage. Flooding can be simulated by requiring a combination of a low \\(f_{\\text{drain}}\\) and sufficient \\(F^W_\\text{irrig|precip,soil}\\) to maintain flooded conditions.</p> \\[ F^W_{\\text{drainage}} = f_\\text{drain} \\cdot \\max(W_{\\text{soil}} - W_{\\text{WHC}}, 0) \\tag{23}\\label{eq:drainage} \\] <p>This is adapted from the original SIPNET formulation (Braswell et al 2005), adding a new parameter that controls the drainage rate.</p>"},{"location":"model-structure/#precipitation","title":"Precipitation","text":"<p>We define \\(F^W_{\\text{precip}} = P\\) as gross (measured) precipitation depth. The fraction reaching the soil is: $$ F^W_{\\text{precip,soil}} = (1 - f_{\\text{intercept}})\\,F^W_{\\text{precip}} $$</p> <p>\\(F^W_{\\text{precip,soil}}\\) is added to soil water in equation \\eqref{eq:A4}.</p>"},{"location":"model-structure/#evapotranspiration","title":"Evapotranspiration","text":"\\[ ET = E + T \\] <p>Evapotranspiration (\\(ET\\)) is calculated as the sum of evaporation (\\(E\\)) and transpiration (\\(T\\)), which are defined below:</p>"},{"location":"model-structure/#evaporation","title":"Evaporation","text":"<p>There are two components of evaporation: (1) immediate evaporation from intercepted precipitation or canopy irrigation and (2) soil surface evaporation.</p> <p>Interception (Immediate Evaporation)</p> \\[ F^W_{\\text{intercept,evap}} = f_{\\text{intercept}}\\,(F^W_{\\text{precip}} + F^W_{\\text{irrig,canopy}}) \\] <p>Soil Evaporation</p> <p>Soil evaporation is computed as:</p> \\[ F^W_{\\text{soil,evap}} = \\frac{\\rho C_p}{\\gamma}\\frac{1}{\\lambda} \\frac{\\text{VPD}_\\text{soil}}{r_d + r_{\\text{soil}}} \\] <p>where: $$ r_d = \\frac{\\text{rdConst}}{u}, \\qquad r_{\\text{soil}} = \\exp!\\left(r_{\\text{soil},1} - r_{\\text{soil},2}\\frac{W_{\\text{soil}}}{W_{\\text{WHC}}}\\right) $$</p> <p>Negative (condensation) values are clipped to zero. If snow &gt; 0 then \\(F^W_{\\text{soil,evap}}=0\\).</p>"},{"location":"model-structure/#evaporation_1","title":"Evaporation","text":"<p>Total evaporation is calculated as the sum of intercepted water, soil evaporation, and sublimation:</p> \\[ E = F^W_{\\text{trans}} + F^W_{\\text{intercept,evap}} + F^W_{\\text{soil,evap}} + F^W_{\\text{sublim}} \\]"},{"location":"model-structure/#transpiration","title":"Transpiration","text":""},{"location":"model-structure/#water-use-efficiency-wue","title":"Water Use Efficiency (WUE)","text":"\\[ \\text{WUE} = \\frac{K_{\\text{WUE}}}{\\text{VPD}} \\tag{Braswell A13}\\label{eq:A13} \\] <p>Water Use Efficiency (WUE) is defined as the ratio of a constant \\(K_{\\text{WUE}}\\) to the vapor pressure deficit (VPD).</p>"},{"location":"model-structure/#potential-transpiration","title":"Potential Transpiration","text":"\\[ T_{\\text{pot}} = \\frac{\\text{GPP}_{\\text{pot}}}{\\text{WUE}} \\tag{Braswell A14}\\label{eq:A14} \\] <p>Potential transpiration  \\((T_{\\text{pot}})\\) is calculated as the potential gross primary production  \\((\\text{GPP}_{\\text{pot}})\\) divided by WUE.</p>"},{"location":"model-structure/#actual-transpiration","title":"Actual Transpiration","text":"\\[ F^W_\\text{trans} = \\min(F^W_\\text{trans, pot}, f \\cdot W_\\text{soil}) \\tag{Braswell A15}\\label{eq:A15} \\] <p>Actual transpiration  \\((F^W_\\text{trans})\\) is the minimum of potential transpiration  \\((F^W_{\\text{pot}})\\) and the fraction  \\((f)\\) of the total soil water  \\((W_\\text{soil})\\) that is removable in one day.</p>"},{"location":"model-structure/#dependence-functions-for-temperature-and-moisture","title":"Dependence Functions for Temperature and Moisture","text":"<p>Metabolic processes including photosynthesis, autotrophic and heterotrophic respiration, decomposition, nitrogen volatilization, and methanogenesis are modified directly by temperature, soil moisture, and / or vapor pressure deficit.</p> <p>Below is a description of these functions.</p>"},{"location":"model-structure/#temperature-dependence-functions-d_texttemp","title":"Temperature Dependence Functions \\(D_\\text{temp}\\)","text":""},{"location":"model-structure/#parabolic-function-for-photosynthesis-d_texttemp-a","title":"Parabolic Function for Photosynthesis \\(D_\\text{temp, A}\\)","text":"<p>Photosynthesis has a temperature optimum in the range of observed air temperatures as well as maximum and minimum temperatures of photosynthesis  \\((A)\\). SIPNET represents the temperature dependence of photosynthesis as a parabolic function. This function has a maximum at the temperature optimum, and decreases as temperature moves away from the optimum.</p> \\[ D_\\text{temp,A}=\\max\\left(\\frac{(T_\\text{max} - T_\\text{air})(T_\\text{air} - T_\\text{min})}{\\left(\\frac{T_\\text{max} - T_\\text{min}}{2}\\right)^2}, 0\\right) \\tag{Braswell A9}\\label{eq:A9} \\] <p>Where \\(T_{\\text{env}}\\) may be soil or air temperature  \\((T_\\text{soil}\\) or \\(T_\\text{air})\\). </p> <p>Becuase the function is symmetric around \\(T_\\text{opt}\\), the parameters \\(T_{\\text{min}}\\) and \\(T_{\\text{opt}}\\) are provided and \\(T_{\\text{max}}\\) is calculated internally as \\(T_{\\text{max}} = 2 \\cdot T_{\\text{opt}} - T_{\\text{min}}\\).</p>"},{"location":"model-structure/#exponential-function-for-respiration-d_texttempq10","title":"Exponential Function for Respiration \\(D_{\\text(temp,Q10)}\\)","text":"<p>The temperature response of autotrophic  \\((R_a)\\) and heterotrophic  \\((R_H)\\) respiration represented as an exponential relationship using a simplified Arrhenius function.</p> \\[ D_{\\text{temp,Q10}} = Q_{10}^{\\frac{(T-T_\\text{opt})}{10}} \\tag{Braswell A18b}\\label{eq:A18b} % Defined as part of eq A18 \\] <p>The exponential function is a simplification of the Arrhenius function in which \\(Q_{10}\\) is the temperature sensitivity parameter, \\(T\\) is the temperature, and \\(T_{\\text{opt}}\\) is the optimal temperature for the process set to 0 for wood and soil respiration. (Note that this is part of the equation for leaf respiration in Braswell et al. (2005).</p> <p>We assume \\(T=T_\\text{air}\\) for leaf and wood respiration, and \\(T=T_\\text{soil}\\) for soil and root respiration. The optimal temperature for leaf respiration is the optimal temperature for photosynthesis, \\(T_{\\text{opt}}=T_{\\text{opt,A}}\\), while \\(T_{\\text{opt}}=0\\) for wood, root, and soil respiration.</p> <p>This function provides two ways to reduce the number of parameters in the model. Braswell et al (2005) used two \\(Q_{10}\\) values, one for \\(R_A\\) and one for \\(R_H\\) and these calibrated to the same value of 1.7. By contrast, Zobitz et al (2008) used four \\(Q_{10}\\) values, one for both leaf and wood, and one each for coarse root, fine root, and soil. Notably, these four \\(Q_{10}\\) values ranged from 1.4 to 5.8 when SIPNET was calibrated to \\(CO_2\\) fluxes in a subalpine forest.</p>"},{"location":"model-structure/#moisture-dependence-functions-d_water","title":"Moisture dependence functions \\(D_{water}\\)","text":"<p>Moisture dependence functions are typically based on soil water content as a fraction of water holding capacity, also referred to as soil moisture or fractional soil wetness. We will represent this fraction of soil wetness as \\(f_\\text{WHC}\\).</p>"},{"location":"model-structure/#soil-water-content-fraction","title":"Soil Water Content Fraction","text":"\\[ f_{\\text{WHC}} = \\frac{W_{\\text{soil}}}{W_{\\text{WHC}}}  \\] <p>Where</p> <ul> <li>\\(W_{\\text{soil}}\\): Soil water content</li> <li>\\(W_{\\text{WHC}}\\): Soil water holding capacity</li> </ul>"},{"location":"model-structure/#water-stress-factor","title":"Water Stress Factor","text":"\\[ D_{\\text{water,}A} = \\frac{F^W_{\\text{trans}}}{F^W_{\\text{trans, pot}}} \\tag{Braswell A16} \\label{eq:A16} \\] <p>The water stress factor \\((D_{\\text{water,}A})\\) is the ratio of actual transpiration  \\((F^W_\\text{trans})\\) to potential transpiration  \\((F^W_\\text{trans, pot})\\).</p>"},{"location":"model-structure/#soil-respiration-moisture-dependence-d_textwaterr_h","title":"Soil Respiration Moisture Dependence  \\((D_{\\text{water,}R_H})\\)","text":"<p>The moisture dependence of heterotrophic respiration is a linear function of soil water content when soil temperature is above freezing:</p> \\[ D_{\\text{water} R_H} =  \\begin{cases} 1, &amp; \\text{if } T_{\\text{soil}} \\leq 0 \\\\ f_{\\text{WHC}} &amp; \\text{if } T_{\\text{soil}} &gt; 0 \\end{cases} \\tag{24}\\label{eq:water_rh} \\]"},{"location":"model-structure/#frakmoisture-dependence-for-anaerobic-metabolism-with-soil-moisture-optimum","title":"\\(\\frak{Moisture \\ Dependence \\ For \\ Anaerobic \\ Metabolism \\ with \\ Soil \\ Moisture \\ Optimum}\\)","text":"<p>There are many possible functions for the moisture dependence of anaerobic metabolism. The key feature is that there must be an optimum moisture level.</p> <p>Lets start with a two-parameter Beta function covering the range \\(50 &lt; f_{\\text{WHC}} &lt; 120\\).</p> <p>Beta function</p> \\[ D_{\\mathrm{moistur,O_2}} = (f_{WHC} - f_{WHC_\\text{min}})^\\beta \\cdot (f_{WHC_\\text{max}} - f_{WHC})^\\gamma \\] <p>Where \\(\\beta\\) and \\(\\gamma\\) are parameters that control the shape of the curve, and can be estimated for a particular maiximum and width.</p> <p>For the relationship between \\(N_2O\\) flux and soil moisture, Wang et al (2023) suggest a Gaussian function.</p>"},{"location":"model-structure/#agronomic-management-events","title":"Agronomic Management Events","text":"<p>All management events are specified in the <code>events.in</code>. Each event is a separate record that includes the  date of the event, the type of event, and associated parameters.</p>"},{"location":"model-structure/#fertilizer-and-organic-matter-additions","title":"Fertilizer and Organic Matter Additions","text":"<p>Additions of Mineral N, Organic N, and Organic C are added directly to their respective pools via the  fluxes \\(F^N_{\\text{fert,min}}\\), \\(F^N_{\\text{fert,org}},\\) and \\(F^C_{\\text{fert,org}}\\) that are specified  in the <code>events.in</code> configuration file.</p> <p>Event parameters specified in the <code>events.in</code> file: - Organic N added  \\((F^N_{\\text{fert,org}})\\) - Organic C added  \\((F^C_{\\text{fert,org}})\\) - Mineral N added  \\((F^N_{\\text{fert,min}})\\)</p> <p>Mineral N includes fertilizer supplied as NO3, NH4, and Urea-N. Urea-N is assumed to hydrolyze to ammonium  and bicarbonate rapidly and is treated as a mineral N pool. This is a common model assumption because of  the fast conversion of Urea to ammonium, and is consistent with the DayCent formulation (Parton et al, 2001).  Only relatively recently did DayCent explicitly model Urea-N to NH4 in order to represent the impact of  urease inhibitors (Gurung et al 2021) that slow down the rate.</p>"},{"location":"model-structure/#fraktillage","title":"\\(\\frak{Tillage}\\)","text":"<p>To represent the effect of tillage on decomposition rate, we define the tillage dependency function \\(D_{\\textrm{till}}\\), which is a function of a tillage effect \\(f_{\\textrm{till}}\\):</p> \\[ D_{\\textrm{till}}(t) = 1 + f_{\\textrm{till}}\\cdot e^{-t/30} \\tag{25}\\label{eq:till} \\] <p>\\(f_{\\textrm{till}}\\) is specified in the <code>events.in</code> file, and \\(D_{\\textrm{till}}(t)\\) is multiplied by the \\(KC\\) term in the calculation of \\(R_H\\) (Eq. \\eqref{eq:rh}).</p> <p>A value of \\(f_{\\textrm{till}}=0.2\\) represents an initial 20% increase that will exponentially decay. The rate of exponential decay is 1/30 days. This rate was chosen such that \\(D_{\\textrm{till}}\\) integrates to 30, which is equivalent to DayCent\u2019s 30\u2011day step function.</p> <p>If multiple tillage events at times \\(t_z\\) occur with effects \\(f_{\\textrm{till,}z}\\), they add linearly thus:</p> \\[ D_{\\textrm{till}}(t) = 1 + \\sum_{z} f_{\\textrm{till,}z}\\, e^{-(t-t_{z})/30},\\quad t\\ge t_{z}. \\]"},{"location":"model-structure/#frakplanting-and-emergence","title":"\\(\\frak{Planting \\ and \\ Emergence}\\)","text":"<p>A planting event is defined by its emergence date and directly specifies the amount of carbon added to each of four plant carbon pools: leaf, wood, fine root, and coarse root. On the emergence date, the model initializes the plant pools with the amounts of carbon specified in the events file.</p> <p>Following carbon addition, nitrogen for each pool is computed using the corresponding C:N stoichiometric ratios following equation \\eqref{eq:cn_stoich}.</p>"},{"location":"model-structure/#frakharvest","title":"\\(\\frak{Harvest}\\)","text":"<p>A harvest event is specified by its date, the event type \"harv\", and the fractions of above and belowground carbon that is either transferred to litter or removed from the system.</p> <p>Because a harvest event only specifies the fraction of above and belowground carbon that is removed or transferred to litter, assume that the above terms apply to leaf + wood, and below applies to fine root + coarse root.</p> <p>The removed fraction is calculated as follows:</p> \\[ % these next two eqns can prob. be simplified % noting that f_removed + f_transfer = 1 % and using i \\in \\{\\text{above}, \\text{below}\\}  % and j in removed, litter F^C_{\\text{harvest,removed}} = f_{\\text{remove,above}} \\cdot C_{\\text{above}} + f_{\\text{remove,below}} \\cdot C_{\\text{root}} \\tag{27}\\label{eq:harvest_removed} \\] <p>The fraction transferred to litter is calculated as follows:</p> \\[ F^C_{\\text{harvest,litter}} = f_{\\text{transfer,above}} \\cdot C_{\\text{leaf}} + f_{\\text{transfer,below}} \\cdot C_{\\text{root}} \\tag{28}\\label{eq:harvest} \\] <p>This amount is then added to the litter flux in equation \\eqref{eq:litter_flux}.</p>"},{"location":"model-structure/#irrigation","title":"Irrigation","text":"<p>Event parameters:</p> <ul> <li>Irrigation rate  \\((F^W_{\\text{irrigation}})\\), cm/day</li> <li>Irrigation type indicator  \\((I_{\\text{irrigation}}\\in {0,1})\\):<ul> <li>Canopy irrigation (0): Water applied to the canopy.</li> <li>Soil irrigation (1): Water directly added to the soil.</li> </ul> </li> </ul> <p>The irrigation that that reaches the soil water pool is:</p> \\[ F^W_{\\text{irrig,soil}} = \\begin{cases} (1 - f_{\\text{intercept}}) \\, F^W_{\\text{irrig}}, &amp; I_{\\text{irrigation}} = 0 \\\\ F^W_{\\text{irrig}}, &amp; I_{\\text{irrigation}} = 1 \\end{cases} \\tag{30}\\label{eq:irrig_soil} \\] <p>Irrigation that is immediately evaporated: $$ F^W_{\\text{irrig,evap}} = \\begin{cases} f_{\\text{intercept}} \\, F^W_{\\text{irrig}}, &amp; I_{\\text{irrigation}} = 0 \\ 0, &amp; I_{\\text{irrigation}} = 1 \\end{cases} \\tag{29}\\label{eq:irrig_evap} $$</p>"},{"location":"model-structure/#references","title":"References","text":"<p>Braswell, Bobby H., William J. Sacks, Ernst Linder, and David S. Schimel. 2005. Estimating Diurnal to Annual Ecosystem Parameters by Synthesis of a Carbon Flux Model with Eddy Covariance Net Ecosystem Exchange Observations. Global Change Biology 11 (2): 335\u201355. https://doi.org/10.1111/j.1365-2486.2005.00897.x.</p> <p>Libohova, Z., Seybold, C., Wysocki, D., Wills, S., Schoeneberger, P., Williams, C., Lindbo, D., Stott, D. and Owens, P.R., 2018. Reevaluating the effects of soil organic matter and other properties on available water-holding capacity using the National Cooperative Soil Survey Characterization Database. Journal of soil and water conservation, 73(4), pp.411-421.</p> <p>Manzoni, Stefano, and Amilcare Porporato. 2009. Soil Carbon and Nitrogen Mineralization: Theory and Models across Scales. Soil Biology and Biochemistry 41 (7): 1355\u201379. https://doi.org/10.1016/j.soilbio.2009.02.031.</p> <p>Parton, W. J., E. A. Holland, S. J. Del Grosso, M. D. Hartman, R. E. Martin, A. R. Mosier, D. S. Ojima, and D. S. Schimel. 2001. Generalized Model for NOx  and N2O Emissions from Soils. Journal of Geophysical Research: Atmospheres 106 (D15): 17403\u201319. https://doi.org/10.1029/2001JD900101.</p> <p>Wang H, Yan Z, Ju X, Song X, Zhang J, Li S and Zhu-Barker X (2023) Quantifying nitrous oxide production rates from nitrification and denitrification under various moisture conditions in agricultural soils: Laboratory study and literature synthesis. Front. Microbiol. 13:1110151. doi: 10.3389/fmicb.2022.1110151</p> <p>Zobitz, J. M., D. J. P. Moore, W. J. Sacks, R. K. Monson, D. R. Bowling, and D. S. Schimel. 2008. \u201cIntegration of Process-Based Soil Respiration Models with Whole-Ecosystem CO2 Measurements.\u201d Ecosystems 11 (2): 250\u201369. https://doi.org/10.1007/s10021-007-9120-1.</p>"},{"location":"parameters/","title":"SIPNET Model States and Parameters","text":"<p>Note: this is a work in progress draft. Not all parameters listed will be used in the CCMMF formulation of the model. The \"Notation\" section should be consistent with model equations, some of the mathematical symbols in the tables may not be.</p> <p>Numbered items are cross-referenced with original documentation.</p>"},{"location":"parameters/#notation","title":"Notation","text":""},{"location":"parameters/#variables-pools-fluxes-and-parameters","title":"Variables (Pools, Fluxes, and Parameters)","text":"Symbol Description \\(C\\) Carbon pool \\(N\\) Nitrogen pool \\(CN\\) Carbon-to-Nitrogen ratio \\(W\\) Water pool or content \\(R\\) Respiration flux \\(A\\) Photosynthesis rate (net assimilation) \\(T\\) Temperature \\(K\\) Rate constant (e.g., for decomposition or respiration) \\(LAI\\) Leaf Area Index \\(PAR\\) Photosynthetically Active Radiation \\(GPP\\) Gross Primary Production \\(NPP\\) Net Primary Production \\(NEE\\) Net Ecosystem Exchange \\(VPD\\) Vapor Pressure Deficit \\(ET\\) Evapotranspiration \\(Q_{10}\\) Temperature sensitivity coefficient \\(f\\) The fraction of a pool or flux other than NPP \\(F\\) Flux of carbon, nitrogen, or water \\(D\\) Dependency or Damping Function \\(N\\) Nitrogen \\(C\\) Carbon \\(\\alpha\\) The fraction of NPP allocated to a plant pool \\(k\\) Scaling factor"},{"location":"parameters/#subscripts-temporal-spatial-or-contextual-identifiers","title":"Subscripts (Temporal, Spatial, or Contextual Identifiers)","text":"Subscript Description \\(X_0\\) Initial value, default value, state at time zero \\(X_t\\) Value at time \\(t\\) \\(X_d\\) Daily value \\(X_\\text{max}\\) Maximum value (e.g., temperature or rate) \\(X_\\text{min}\\) Minimum value (e.g., temperature or rate) \\(X_\\text{opt}\\) Optimal value (e.g., temperature or rate) \\(X_\\text{avg}\\) Average value (e.g., over a timestep or spatial area) \\(X_\\text{leaf}\\) leaf pools or fluxes \\(X_\\text{wood}\\) wood pools or fluxes \\(X_\\text{root}\\) root pool \\(X_\\text{fine root}\\) fine root pool \\(X_\\text{coarse root}\\) coarse root pool \\(X_\\text{soil}\\) soil pools or processes \\(X_\\text{litter}\\) litter pools or processes \\(X_\\text{veg}\\) vegetation processes (general) \\(X_\\text{resp}\\) respiration processes \\(X_\\text{dec}\\) decomposition processes \\(X_\\text{vol}\\) volatilization processes \\(X_\\text{VPD}\\) vapor pressure deficit \\(X_\\text{org}\\) organic forms \\(X_\\text{mineral}\\) mineral forms \\(X_{\\text{anaer}}\\) anaerobic soil conditions <p>Subscripts may be used in combination, e.g. \\(X_{\\text{soil,mineral},0}\\).</p>"},{"location":"parameters/#run-time-parameters","title":"Run-time Parameters","text":"<p>Run-time parameters can change from one run to the next, or when the model is stopped and restarted. These include initial state values and parameters related to plant physiology, soil physics, and biogeochemical cycling.</p>"},{"location":"parameters/#initial-state-values","title":"Initial state values","text":"Symbol Parameter Name Definition Units notes 1 \\(C_{\\text{wood},0}\\) plantWoodInit Initial wood carbon \\(\\text{g C} \\cdot \\text{m}^{-2} \\text{ ground area}\\) above-ground + roots 2 \\(LAI_0\\) laiInit Initial leaf area m^2 leaves * m^-2 ground area multiply by SLW to get initial plant leaf C: \\(C_{\\text{leaf},0} = LAI_0 \\cdot SLW\\) 3 \\(C_{\\text{litter},0}\\) litterInit Initial litter carbon \\(\\text{g C} \\cdot \\text{m}^{-2} \\text{ ground area}\\) 4 \\(C_{\\text{soil},0}\\) soilInit Initial soil carbon \\(\\text{g C} \\cdot \\text{m}^{-2} \\text{ ground area}\\) 5 \\(W_{\\text{litter},0}\\) litterWFracInit unitless fraction of litterWHC 6 \\(W_{\\text{soil},0}\\) soilWFracInit unitless fraction of soilWHC \\(N_{\\text{org, litter},0}\\) Initial litter organic nitrogen content g N m\\(^{-2}\\) \\(N_{\\text{org, soil},0}\\) Initial soil organic nitrogen content g N m\\(^{-2}\\) \\(N_{\\text{min, soil},0}\\) Initial soil mineral nitrogen content g N m\\(^{-2}\\) \\({CH_4}_{\\text{soil},0}\\) Initial methane concentration in the soil g C m\\(^{-2}\\) \\({N_2O}_{\\text{soil},0}\\) Nitrous oxide concentration in the soil g N m\\(^{-2}\\) \\(f_{\\text{fine root},0}\\) fineRootFrac Fraction of <code>plantWoodInit</code> allocated to initial fine root carbon pool \\(f_{\\text{coarse root},0}\\) coarseRootFrac Fraction of <code>plantWoodInit</code> allocated to initial coarse root carbon pool"},{"location":"parameters/#litter-quality-parameters","title":"Litter Quality Parameters","text":"Symbol Name Description Units Notes \\(CN_{\\textrm{litter}}\\) Carbon to Nitrogen ratio of litter \\(CN_{\\textrm{wood}}\\) Carbon to Nitrogen ratio of wood CN_coarse_root = CN_wood \\(CN_{\\textrm{leaf}}\\) Carbon to Nitrogen ratio of leaves \\(CN_{\\textrm{fine root}}\\) Carbon to Nitrogen ratio of fine roots \\(CN_{\\textrm{coarse root}}\\) Carbon to Nitrogen ratio of coarse roots \\(k_\\textit{CN}\\) Decomposition CN scaling parameter"},{"location":"parameters/#photosynthesis-parameters","title":"Photosynthesis parameters","text":"Symbol Parameter Name Definition Units notes 8 \\(A_{\\text{max}}\\) aMax Maximum net CO2 assimilation rate \\(\\text{nmol CO}_2 \\cdot \\text{g}^{-1} \\cdot \\text{leaf} \\cdot \\text{s}^{-1}\\) assuming max. possible PAR, all intercepted, no temp, water or VPD stress 9 \\(f_{A_{\\text{max},d}}\\) aMaxFrac avg. daily aMax as fraction of instantaneous fraction Avg. daily max photosynthesis as fraction of \\(A_{\\text{max}}\\) 10 \\(R_\\text{leaf,opt}\\) baseFolRespFrac basal Foliar maintenance respiration as fraction of \\(A_{\\text{max}}\\) fraction 11 \\(T_{\\text{min}}\\) psnTMin Minimum temperature at which net photosynthesis occurs \\(^{\\circ}\\text{C}\\) 12 \\(T_{\\text{opt}}\\) psnTOpt Optimum temperature at which net photosynthesis occurs \\(^{\\circ}\\text{C}\\) 13 \\(K_\\text{VPD}\\) dVpdSlope Slope of VPD\u2013photosynthesis relationship \\(kPa^{-1}\\) dVpd = 1 - dVpdSlope * vpd^dVpdExp 14 \\(K_{\\text{VPD}},{\\text{exp}}\\) dVpdExp Exponent used to calculate VPD effect on Psn dimensionless dVpd = 1 - dVpdSlope * vpd^dVpdExp 15 \\(\\text{PAR}_{1/2}\\) halfSatPar Half saturation point of PAR\u2013photosynthesis relationship \\(m^{-2}\\)\\ ground area \\(\\cdot\\) day\\(^{-1}\\) PAR at which photosynthesis occurs at 1/2 theoretical maximum 16 \\(k\\) attenuation Canopy PAR extinction coefficient"},{"location":"parameters/#phenology-related-parameters","title":"Phenology-related parameters","text":"Symbol Parameter Name Definition Units notes 17 \\(D_{\\text{on}}\\) leafOnDay Day of year when leaves appear day of year 18 gddLeafOn with gdd-based phenology, gdd threshold for leaf appearance 19 soilTempLeafOn with soil temp-based phenology, soil temp threshold for leaf appearance 20 \\(D_{\\text{off}}\\) leafOffDay Day of year for leaf drop 21 leafGrowth additional leaf growth at start of growing season \\(\\text{g C} \\cdot \\text{m}^{-2} \\text{ ground}\\) 22 fracLeafFall additional fraction of leaves that fall at end of growing season 23 \\(\\alpha_\\text{leaf}\\) leafAllocation fraction of NPP allocated to leaf growth 24 \\(K_{leaf}\\) leafTurnoverRate average turnover rate of leaves fraction per day read in as per-year rate \\(L_{\\text{max}}\\) Maximum leaf area index obtained \\(\\text{m}^2 \\text{ leaf } \\text{m}^{-2} \\text{ ground}\\) ? from Braswell et al 2005; can't find in code"},{"location":"parameters/#allocation-parameters","title":"Allocation parameters","text":"Symbol Parameter Name Definition Units notes 64 fineRootFrac fraction of wood carbon allocated to fine root 65 coarseRootFrac fraction of wood carbon that is coarse root 66 \\(\\alpha_\\text{fine root}\\) fineRootAllocation fraction of NPP allocated to fine roots 67 \\(\\alpha_\\text{wood}\\) woodAllocation fraction of NPP allocated to wood 68 fineRootExudation fraction of GPP from fine roots exuded to the soil[^exudates] fraction Pulsing parameters 69 coarseRootExudation fraction of GPP from coarse roots exuded to the soil[^exudates] fraction Pulsing parameters <p>[^exudates]: Fine and coarse root exudation are calculated as a fraction of GPP, but the exudates are subtracted from the fine and coarse root pools, respectively. </p>"},{"location":"parameters/#autotrophic-respiration-parameters","title":"Autotrophic respiration parameters","text":"Symbol Parameter Name Definition Units notes 25 \\(R_{\\text{a,wood},0}\\) baseVegResp Wood maintenance respiration rate at \\(0^\\circ C\\) g C respired * g\\(^{-1}\\) plant C * day\\(^{-1}\\) read in as per-year rate only counts plant wood C; leaves handled elsewhere (both above and below-ground: assumed for now to have same resp. rate) 26 \\(Q_{10v}\\) vegRespQ10 Vegetation respiration Q10 Scalar determining effect of temp on veg. resp. 27 growthRespFrac growth resp. as fraction of (\\(GPP - R_\\text{a,wood} - R_\\text{a,leaf}\\)) 28 frozenSoilFolREff amount that foliar resp. is shutdown if soil is frozen 0 = full shutdown, 1 = no shutdown 29 frozenSoilThreshold soil temperature below which frozenSoilFolREff and frozenSoilEff kick in \u00b0C 72 baseFineRootResp base respiration rate of fine roots \\(\\text{y}^{-1}\\) per year rate 73 baseCoarseRootResp base respiration rate of coarse roots \\(\\text{y}^{-1}\\) per year rate"},{"location":"parameters/#soil-respiration-parameters","title":"Soil respiration parameters","text":"Symbol Parameter Name Definition Units notes 30 \\(K_\\text{litter}\\) litterBreakdownRate rate at which litter is converted to soil / respired at 0\u00b0C and max soil moisture g C broken down * g^-1 litter C * day^-1 read in as per-year rate 31 fracLitterRespired of the litter broken down, fraction respired (the rest is transferred to soil pool) 32 \\(K_{dec}\\) baseSoilResp Soil respiration rate at \\(0 ^{\\circ}\\text{C}\\) and moisture saturated soil g C respired * g\\(^{-1}\\) soil C * day\\(^{-1}\\) read in as per-year rate 34 \\(Q_{10s}\\) soilRespQ10 Soil respiration Q10 scalar determining effect of temp on soil respiration 39 soilRespMoistEffect scalar determining effect of moisture on soil resp. baseMicrobeResp new \\(f_{\\textrm{till}}\\) tillageEff Effect of tillage on decomposition that exponentially decays over time fraction Per\u2011event in <code>events.in</code>; 0 = no effect <ul> <li>\\(R_{dec}\\): Rate of decomposition \\((\\text{day}^{-1})\\) </li> <li>\\(Q_{10dec}\\): Temperature coefficient for \\(R_{dec}\\) (unitless)</li> </ul>"},{"location":"parameters/#nitrogen-cycle-parameters","title":"Nitrogen Cycle Parameters","text":"<ul> <li>\\(K_{n,vol}\\): Rate constant for volatilization (day-1)</li> <li>\\(f_{N2O_{vol}}\\): Fraction of volatilization leading to N2O production</li> <li>\\(R_{min}\\): Rate of mineralization (day-1)</li> <li>\\(I_\\text{N limit}\\): Indicator for nitrogen limitation</li> </ul>"},{"location":"parameters/#methane-parameters","title":"Methane parameters","text":"<ul> <li>\\(R_{meth}\\): Rate of methane production \\((\\text{day}^{-1})\\)</li> <li>\\(K_{meth}\\): Rate constant for methane production under anaerobic conditions \\((\\text{day}^{-1})\\)</li> <li>\\(K_{methox}\\): Rate constant, methane oxidation \\((\\text{day}^{-1})\\)</li> </ul>"},{"location":"parameters/#moisture-related-parameters","title":"Moisture-related parameters","text":"Symbol Parameter Name Definition Units notes 40 \\(f_{\\text{trans,avail}}\\) waterRemoveFrac fraction of plant available soil water which can be removed in one day by transpiration without water stress occurring new \\(f_\\text{drain,0}\\) waterDrainFrac fraction of plant available soil water which can be removed in one day by drainage \\(d^{-1}\\) default 1 for well drained soils 41 frozenSoilEff fraction of water that is available if soil is frozen (0 = none available, 1 = all still avail.) if frozenSoilEff = 0, then shut down psn. even if WATER_PSN = 0, if soil is frozen (if frozenSoilEff &gt; 0, it has no effect if WATER_PSN = 0) 42 wueConst water use efficiency constant 43 litterWHC litter (evaporative layer) water holding capacity cm 44 soilWHC soil (transpiration layer) water holding capacity cm 45 $f_\\text{intercept} immedEvapFrac fraction of rain that is immediately intercepted &amp; evaporated 46 fastFlowFrac fraction of water entering soil that goes directly to drainage \\(k_\\text{SOM,drain}\\) 47 snowMelt rate at which snow melts cm water equivavlent per degree Celsius per day 49 rdConst scalar determining amount of aerodynamic resistance 50 rSoilConst1 soil resistance = e^(rSoilConst1 - rSoilConst2 * W1) , where W1 = (litterWater/litterWHC) 51 rSoilConst2 soil resistance = e^(rSoilConst1 - rSoilConst2 * W1) , where W1 = (litterWater/litterWHC)"},{"location":"parameters/#tree-physiological-parameters","title":"Tree physiological parameters","text":"Symbol Parameter Name Definition Units notes 53 \\(SLW\\) leafCSpWt g C * m^-2 leaf area 54 \\(C_{frac}\\) cFracLeaf g leaf C * g^-1 leaf 55 \\(K_\\text{wood}\\) woodTurnoverRate average turnover rate of woody plant C \\(\\text{y}^{-1}\\) read in as per-year rate; leaf loss handled separately 70 \\(K_\\text{fine root}\\) fineRootTurnoverRate turnover of fine roots \\(\\text{y}^{-1}\\) per year rate 71 \\(K_\\text{coarse root}\\) coarseRootTurnoverRate turnover of coarse roots yr^-1 per year rate <p>|</p>"},{"location":"parameters/#hard-coded-values","title":"Hard-coded Values","text":"Parameter Value Description <code>C_WEIGHT</code> 12.0 molecular weight of carbon <code>MEAN_NPP_DAYS</code> 5 over how many days do we keep the running mean <code>MEAN_NPP_MAX_ENTRIES</code> <code>MEAN_NPP_DAYS</code>*50 assume that the most pts we can have is two per hour <code>MEAN_GPP_SOIL_DAYS</code> 5 over how many days do we keep the running mean <code>MEAN_GPP_SOIL_MAX_ENTRIES</code> <code>MEAN_GPP_SOIL_DAYS</code>*50 assume that the most pts we can have is one per hour <code>LAMBDA</code> 2501000 latent heat of vaporization (J/kg) <code>LAMBDA_S</code> 2835000 latent heat of sublimation (J/kg) <code>RHO</code> 1.3 air density (kg/m^3) <code>CP</code> 1005. specific heat of air (J/(kg K)) <code>GAMMA</code> 66 psychometric constant (Pa/K) <code>E_STAR_SNOW</code> 0.6 approximate saturation vapor pressure at 0\u00b0C (kPa)"},{"location":"parameters/#input-files","title":"Input Files","text":""},{"location":"parameters/#run-settings","title":"Run Settings","text":"<p>See Run-time Parameters above.</p> <p>Multi-site runs, sensitivity tests, and Monte Carlo runs are no longer supported. Typically these analyses are handled  using the PEcAn Framework.</p>"},{"location":"parameters/#parameters-and-initial-conditions","title":"Parameters and Initial Conditions","text":"<p>Both initial conditions and parameters are specified in a file named <code>sipnet.param</code>.</p> <p>The SIPNET parameter file (<code>sipnet.param</code>) specifies model parameters and their properties for each simulation.  Each line in the file corresponds to a single parameter and contains five or six space-separated values.</p> Column Description Parameter Name Name of the parameter Value Value of the parameter to use in the model"},{"location":"parameters/#example-sipnetparam-file","title":"Example <code>sipnet.param</code> file","text":"<p>Column names are not used, but are:</p> <pre><code>param_name value\n</code></pre> <p>The first lines in <code>sipnet.param</code> could be:</p> <pre><code>plantWoodInit 110\nlaiInit 0\nlitterInit 200\nsoilInit 7000\nlitterWFracInit 0.5\nsoilWFracInit 0.6\nsnowInit 1\nmicrobeInit 0.5\nfineRootFrac 0.2\ncoarseRootFrac 0.2\naMax 95\naMaxFrac 0.85\n...\n</code></pre>"},{"location":"parameters/#climate","title":"Climate","text":"<p>For each step of the model, the following inputs are needed. These are provided in a file named <code>&lt;sitename&gt;.clim</code> with the following columns:</p> col parameter description units notes 1 year year of start of this timestep integer, e.g. 2010 2 day day of start of this timestep Day of year 1 = Jan 1 3 time time of start of this timestep hours after midnight e.g. noon = 12.0, midnight = 0.0, can be a fraction 4 length length of this timestep days variable-length timesteps allowed, typically not used 5 tair avg. air temp for this time step degrees Celsius 6 tsoil average soil temperature for this time step degrees Celsius can be estimated from Tair 7 par average photosynthetically active radiation (PAR) for this time step \\(\\text{Einsteins} \\cdot m^{-2} \\text{ground area} \\cdot \\text{time step}^{-1}\\) input is in Einsteins * m^-2 ground area, summed over entire time step 8 precip total precip. for this time step cm input is in mm; water equivilant - either rain or snow 9 vpd average vapor pressure deficit kPa input is in Pa, can be calculated from air temperature and relative humidity. 10 vpdSoil average vapor pressure deficit between soil and air kPa input is in Pa ; differs from vpd in that saturation vapor pressure is calculated using Tsoil rather than Tair 11 vPress average vapor pressure in canopy airspace kPa input is in Pa 12 wspd avg. wind speed m/s <p>Note: An older format for this file included location as the first column and soilWetness as the last column. Files  with this older format can still be read by sipnet: * SIPNET will print a warning indicating that it is ignoring the obsolete columns * If there is more than one location specified in the file, SIPNET will error and halt</p>"},{"location":"parameters/#example-sipnetclim-file","title":"Example <code>sipnet.clim</code> file:","text":"<p>Column names are not used, but are:</p> <pre><code>loc year day  time length tair tsoil par    precip vpd   vpdSoil vPress wspd\n</code></pre> <p>Half-hour time step</p> <pre><code>0   1998 305  0.00    -1800   1.9000   1.2719   0.0000   0.0000 109.5364  77.5454 726.6196   1.6300\n0   1998 305  0.50    -1800   1.9000   1.1832   0.0000   0.0000 109.5364  73.1254 726.6196   1.6300\n0   1998 305  1.00    -1800   2.0300   1.1171   0.0000   0.0000 110.4243  63.9567 732.5092   0.6800\n0   1998 305  1.50    -1800   2.0300   1.0439   0.0000   0.0000 110.4243  60.3450 732.5092   0.6800\n</code></pre> <p>Variable time step</p> <pre><code>0     1998 305  0.00  0.292 1.5  0.8   0.0000 0.0000 105.8 70.1    711.6  0.9200\n0     1998 305  7.00  0.417 3.6  1.8   5.6016 0.0000 125.7 23.5    809.4  1.1270\n0     1998 305 17.00  0.583 1.9  1.3   0.0000 0.0000 108.1 75.9    732.7  1.1350\n0     1998 306  7.00  0.417 2.2  1.4   2.7104 1.0000 114.1 71.6    741.8  0.9690\n</code></pre>"},{"location":"parameters/#agronomic-events","title":"Agronomic Events","text":"<p>For managed ecosystems, the following inputs are provided in a file named <code>events.in</code> with the following columns:</p> col parameter description units notes 1 year year of start of this timestep e.g. 2010 2 day day of start of this timestep Day of year 1 = Jan 1 3 event_type type of event one of plant, harv, till, fert, irrig 4...n event_param parameter associated with event see table below <ul> <li>Agronomic events are stored in <code>events.in</code>, one event per row</li> <li>Events in the file must be sorted chronologically</li> <li>Events are specified by year and day (no hourly timestamp)</li> <li>It is assumed that there is one (or more) records in the climate file for each year/day that appears in the events file</li> <li>SIPNET will throw an error if it finds an event with no corresponding climate record</li> <li>Events are processed with the first climate record that occurs for the relevant year/day as an instantaneous one-time change</li> <li>We may need events with duration later, spec TBD. Tillage is likely in this bucket.</li> <li>The effects of an event are applied after fluxes are calculated for the current climate record; they are applied as a delta to one or more state variables, as required</li> </ul> parameter col req? description amount 5 Y Amount added (cm/d) method 6 Y 0=canopy1=soil2=flood (placeholder) <ul> <li>Model representation:<ul> <li>an irrigation event increases soil moisture. Canopy irrigation also loses some moisture to evaporation.</li> </ul> </li> </ul> <p>Specifically: </p> <ul> <li>amount is listed as cm/d, as events are specified per-day, this is treated as <code>cm</code> of water added on that day even though it is added at a specific time step.</li> <li>For method=soil, this amount of water is added directly to the <code>soilWater</code> state variable.</li> <li>For method=canopy, a fraction of the irrigation water (determined by input param <code>immedEvapFrac</code>) is added to the flux state variable <code>immedEvap</code>, with the remainder going to <code>soilWater</code>.</li> </ul> <p>Notes:</p> <ul> <li>Irrigation could also directly change the soil moisture content rather than adding water as a flux. This could be used to represent an irrigation program that sets a moisture range and turns irrigation on at the low end and off at the high end of the range.</li> </ul>"},{"location":"parameters/#fertilization-events","title":"Fertilization Events","text":"parameter col req? description org-N 5 Y g N / m2 org-C 6 Y g C / m2 min-N 7 Y g N / m2 <p>Model representation:</p> <pre><code>- increases size of mineral N and litter C and N. Urea-N is assumed to be mineral N.\n</code></pre> <pre><code>- notes: PEcAn will handle conversion from fertilizer amount and type to mass of N and C allocated to different pools\n</code></pre>"},{"location":"parameters/#tillage-events","title":"Tillage Events","text":"parameter col req? description tillageEff (\\(f_{\\textrm{till}}\\)) 5 Y Adjustment to \\(R_H\\) <p>Model representation:</p> <pre><code>- Transient increase in decomposition rate by $f_{\\text{,tillage}}$ that exponentially decays over time.\n- Multiple tillage events are additive.\n</code></pre>"},{"location":"parameters/#planting-events","title":"Planting Events","text":"parameter col req? description leaf-C 5 Y C added to leaf pool (g C / m2) wood-C 6 Y C added to above-ground wood pool (g C / m2) fine-root-C 7 Y C added to fine root pool (g C / m2) coarse-root-C 8 Y C added to coarse root pool (g C / m2) <p>Model representation:</p> <pre><code>- Date of event is the date of emergence, not the date of actual planting \n- Increases size of carbon pools by the amount of each respective parameter\n- $N$ pools are calculated from $CN$ stoichiometric ratios.\n</code></pre> <p>Notes: PFT (crop type) is not an input parameter for a planting event because SIPNET only represents a single PFT.</p>"},{"location":"parameters/#harvest-events","title":"Harvest Events","text":"parameter col req? description fraction of aboveground biomass removed 5 Y fraction of belowground biomass removed 6 N default = 0 fraction of aboveground biomass transferred to litter pool 7 N default = 1 - removed fraction of belowground biomass transferred to litter pool 8 N default = 1 - removed <p>Model representation:</p> <pre><code>- biomass C and N pools are either removed or added to litter\n- for annuals or plants terminated, no biomass remains (col 5 + col 7 = 1 and col 6 + col 8 = 1). \n- for perennials, some biomass may remain (col 5 + col 7 &lt;= 1 and col 6 + col 8 &lt;= 1; remainder is living).\n- root biomass is only removed for root crops\n</code></pre>"},{"location":"parameters/#example-of-eventsin-file","title":"Example of <code>events.in</code> file:","text":"<pre><code>2022  35  till  0.2       # tilled on day 35, f_till = 0.2 (20% boost to rate term)\n2022  40  till  0.1       # tilled on day 40, adds 0.1 to f_till\n2022  40  irrig  5 1      # 5cm canopy irrigation on day 40 applied to soil\n2022  40  fert   0 0 10   # fertilized with 10 g / m2 N_min on day 40 of 2022\n2022  50  plant  10 3 2 5 # plant emergence on day 50 with 10/3/2/4 g C / m2, respectively, added to the leaf/wood/fine root/coarse root pools \n2022  250 harv   0.1      # harvest 10% of aboveground plant biomass on day 250\n</code></pre>"},{"location":"parameters/#outputs","title":"Outputs","text":""},{"location":"parameters/#model-outputs","title":"Model Outputs","text":"<p>The <code>sipnet.out</code> file contains a time series of state variables and fluxes from the simulation.  </p> Symbol Parameter Name Definition Units 1 year year of start of this timestep 2 day day of start of this timestep 3 time time of start of this timestep 4 plantWoodC carbon in wood g C/m\\(^2\\) 5 plantLeafC carbon in leaves g C/m\\(^2\\) 6 soil carbon in mineral soil g C/m\\(^2\\) 7 microbeC carbon in soil microbes g C/m\\(^2\\) 8 coarseRootC carbon in coarse roots g C/m\\(^2\\) 9 fineRootC carbon in fine roots g C/m\\(^2\\) 10 litter carbon in litter g C/m\\(^2\\) 11 litterWater moisture in litter layer cm 12 soilWater moisture in soil cm 13 \\(f_\\text{WHC}\\) soilWetnessFrac moisture in soil as fraction 14 snow snow water cm 15 npp net primary production g C/m\\(^2\\) 16 nee net ecosystem production g C/m\\(^2\\) 17 cumNEE cumulative nee g C/m\\(^2\\) 18 \\(GPP\\) gpp gross ecosystem production g C/m\\(^2\\) 19 \\(R_{A,\\text{above}}\\) rAboveground plant respiration above ground g C/m\\(^2\\) 20 \\(R_H\\) rSoil soil respiration g C/m\\(^2\\) 21 \\(R_{A\\text{, root}}\\) rRoot root respiration g C/m\\(^2\\) 22 \\(R\\) rtot total respiration g C/m\\(^2\\) 23 fluxestranspiration transpiration cm 24 \\(F^N_\\text{vol}\\) fluxesn2o Nitrous Oxide flux g N/m\\(^2\\) / timestep 25 \\(F^C_{\\text{CH}_4}\\) fluxesch4 Methane Flux g C/m\\(^2\\) / timestep 26 \\(F^N_\\text{vol}\\) fluxesn2o Nitrous Oxide flux g N/m\\(^2\\) / timestep 27 \\(F^C_{\\text{CH}_4}\\) fluxesch4 Methane Flux g C/m\\(^2\\) / timestep <p>An example output file can be found in tests/smoke/sipnet.out.</p> <pre><code>Notes: PlantWoodC, PlantLeafC, Soil and Litter in g C/m^2; Water and Snow in cm; SoilWetness is fraction of WHC;\nyear day time plantWoodC plantLeafC soil microbeC coarseRootC fineRootC litter litterWater soilWater soilWetnessFrac snow npp nee cumNEE gpp rAboveground rSoil rRoot ra rh rtot evapotranspiration fluxestranspiration fPAR\n1998 305  0.00  5759.77  1133.88 16000.06     8.00  1919.90  1919.64   400.00    0.500     6.00    0.500     0.00    -0.32     0.74     0.74     0.00    0.164    0.578    0.159    0.324    0.419    0.742 0.00302126   0.0000   0.0000\n1998 305  7.00  5759.63  1133.71 16000.08     8.00  1919.77  1919.10   400.00    0.500     5.99    0.500     0.00    -0.30     0.97     1.71     0.22    0.271    0.917    0.251    0.522    0.666    1.188 0.00240544   0.0022   0.5821\n1998 305 17.00  5759.16  1133.48 16000.15     8.00  1919.57  1918.37   400.00    0.500     5.99    0.499     0.00    -0.67     1.56     3.27     0.00    0.338    1.219    0.335    0.673    0.884    1.557 0.00662149   0.0000   0.5821\n</code></pre>"},{"location":"parameters/#events-output","title":"Events output","text":"<p>When event handling is enabled, SIPNET will create a file named <code>events.out</code>. </p> <p>This file is designed primarily for testing and debugging. It contains one row for each agronomic event that is processed.  Each row lists the year, day, event type, and parameter name/value pairs.  The name/value pairs represent the state variables that are directly changed by an event, recording the change (delta) applied to each.</p> <p>Information in <code>events.out</code> can, in principle, be reconstructed or inferred from <code>events.in</code> and <code>sipnet.out</code> though this may be confounded if simultaneous events affect the same variable.</p> <p>Still, <code>sipnet.out</code> is the authoritative source for information about system state and evolution in time, including responses to events.</p> <p>Below is an example <code>events.out</code>, with header enabled for clarity.  Note the delimiters: spaces separate columns, commas separate name/value pairs, and <code>=</code> map names with their values (deltas).</p> <pre><code>year  day  type     param_name=delta[,param_name=delta,...]\n2023   65  plant    envi.plantLeafC=3.00,envi.plantWoodC=4.00,envi.fineRootC=5.00,envi.coarseRootC=6.00\n2023   70  irrig    envi.soilWater=5.00\n2023  200  harv     env.litter=5.46,envi.plantLeafC=-5.93,envi.plantWoodC=-4.75,envi.fineRootC=-3.73,envi.coarseRootC=-3.89\n2024   65  plant    envi.plantLeafC=3.00,envi.plantWoodC=5.00,envi.fineRootC=7.00,envi.coarseRootC=9.00\n2024   70  irrig    fluxes.immedEvap=2.50,envi.soilWater=2.50\n2024  200  harv     env.litter=4.25,envi.plantLeafC=-1.39,envi.plantWoodC=-1.63,envi.fineRootC=-2.52,envi.coarseRootC=-2.97\n</code></pre>"},{"location":"wish-list/","title":"SIPNET WISH LIST","text":"<p>This is the spot to capture ideas on future work that have not been fully thought out (and should thus go into a  feature request).</p> <p>Order is not relevant here, though we could try to order by priority, I suppose. Seems like that will get out of date very easily, though. Also, the infrastructure vs Modeling divide is loose at besst.</p>"},{"location":"wish-list/#infrastructure-ideas","title":"Infrastructure Ideas","text":""},{"location":"wish-list/#more-doxygen-docs","title":"More doxygen docs","text":"<p>We have doxygen set up, and we even have it auto publish, but... we don't have a lot of actual documentation. This is  something that could (and should) be incrementally improved as we work on the code, but it might be a really good idea spend some focused time on this.</p>"},{"location":"wish-list/#remove-unsupported-code","title":"Remove unsupported code","text":"<p>There are a lot of compiler options and related code that we have no intention of supporting, and we are not even sure  what still works.</p> <p>We should decide what options we want to keep, remove code for those we don't, and make sure remaining all works  together (where it should).</p>"},{"location":"wish-list/#revamp-sipnetin","title":"Revamp <code>sipnet.in</code>","text":"<p>The input config file <code>sipnet.in</code> probably has cruft in it, and/or might be a bit of a relic. We should take a good look there and at least make sure it is all still relevant. Even more so, we should think about how we want to handle this file in the scope of the next item (see below, compile flag to cli option conversion).</p>"},{"location":"wish-list/#compile-flag-to-cli-option-conversion","title":"Compile flag to cli option conversion","text":"<p>This is a biggie, and possibly the highest priority here. We should replace the current compile-flag strategy with  command-line interface options for the options we are choosing to keep. Assuming we put the same options in sipnet.in, we should have any cli-specified options have priority (which is typical).</p> <p>This project has overlap with both \"Revamp sipnet.in\" and \"Remove unsupported code\".</p>"},{"location":"wish-list/#replace-use-of-exit-with-something-more-testable","title":"Replace use of <code>exit</code> with something more testable","text":"<p>SIPNET's strategy of calling <code>exit()</code> when it encounters an error is difficult to test, requiring patching in a custom exit handler. Investigate and find a replacement suitable for the C language. Note: this may not be worth the effort.</p>"},{"location":"wish-list/#revamp-unit-testing-requires-command-line-option-conversion-and-exit-replacement-if-that-is-going-to-happen","title":"Revamp unit testing (requires command line option conversion, and <code>exit</code> replacement if that is going to happen)","text":"<p>Once we have moved away from the compiler-switch strategy (and the use of <code>exit</code>, if that happens), we can more easily  use a standard unit testing package (such as CUnit, though there are others).  This would make creating more unit tests easier.</p>"},{"location":"wish-list/#more-unit-testing","title":"More unit testing!","text":"<p>ESPECIALLY after the Revamp unit testing item, fill out our unit test coverage. Note that this is best for the  infrastructure parts of the code; the algorithmic/modeling parts are likely best tested at the integration level. Also,  the goal is never to get 100% coverage, IMO - that just leads to bad tests.</p>"},{"location":"wish-list/#more-integrationsmoke-testing","title":"More integration/smoke testing!","text":"<p>Our 'integration' testing right now consists of one simple regression test. This can and should be more extensive. </p>"},{"location":"wish-list/#add-logging","title":"Add logging","text":"<p>There are a lot of details of SIPNET's runs that are not reported. We should create a logging mechanism, convert  existing <code>printf</code> statements to use that system, and then add a lot more. Some items we may want to add: * configuration options in effect * version of SIPNET * warnings and errors (possibly all already there?) * information flow description</p> <p>We might also want to have a verbosity option to control how much gets reported.</p>"},{"location":"wish-list/#modeling-ideas","title":"Modeling Ideas","text":""},{"location":"wish-list/#features-excluded-in-favor-of-simplicity","title":"Features excluded in favor of simplicity","text":"<p>May be revisited if motivated by specific use cases or to improve model skill</p> <p>If to improve model skill, improvements should be demonstrated under multiple conditions.</p> <ul> <li>Multi-layer soil  </li> <li>Rooting zone differences by crop type  </li> <li>Sub-daily irrigation  </li> <li>Represent subdaily irrigation as duration as well as amount.  </li> <li>Additional Q10   </li> <li>Split mineral N into NO3 and NH4 and explicitly represent nitrification and denitrification  </li> <li>CH4 flux: account for diffusion, methane oxidation, ebullition, and plant transport  </li> <li>Methanotrophy  </li> <li>N immobillization  </li> <li>Variable Plant CN Ratios  </li> <li>Water holding capacity of SOM  </li> <li>Fruit, nut, seed pools  </li> <li>Orchard floor preparation practices  </li> <li>Clay / Sand  </li> <li>Lignin  </li> <li>pH</li> </ul>"},{"location":"wish-list/#lesser-ideas-in-either-scope-or-importance","title":"Lesser Ideas (in either scope or importance)","text":""},{"location":"wish-list/#have-events-work-with-roots0-unless-we-remove-that-case","title":"Have events work with ROOTS=0 (unless we remove that case!)","text":"<p>[Only if motivated by specific use case] The event handler requires <code>ROOTS</code> to be on; this is apparent in event modeling that  distinguishes between wood C, fine root C, and coarse root C (in addition to leaf C). Those three pools are (one or two?) when <code>ROOTS=0</code>. We punted on enabling event handling for that case.</p>"},{"location":"developer-guide/cli-options/","title":"Command Line Options","text":"<p>These instructions explain how to add new command-line options to the SIPNET executable. Three types of command-line  options are enabled: flags, integer-valued options, and string-valued options.</p>"},{"location":"developer-guide/cli-options/#background","title":"Background","text":"<p>The <code>Context</code> struct, defined in <code>common/context.h</code>, holds the values of all command-line options.</p> <p>When adding a new command-line option, you will need to add a corresponding member to the <code>Context</code> struct that will hold the value of that option.</p>"},{"location":"developer-guide/cli-options/#important-notes","title":"Important Notes","text":""},{"location":"developer-guide/cli-options/#naming","title":"Naming","text":"<p>Each command-line option must have a corresponding entry in the <code>Context</code> struct. SIPNET uses a mapping system to  link the command-line option (e.g. <code>print_header</code>) to its <code>Context</code> member (in this case, <code>printHeader</code>).</p> <p>Some care must be taken to allow SIPNET to map between the option and the <code>Context</code> member that holds the options value.  The mapping is created using the <code>nameToKey</code> function in <code>common/context.c</code> that: - removes all non-alphanumeric characters. - converts alpha characters to lowercase. </p> <p>For the mapping to work, the option name (e.g., <code>print_header</code>) and <code>Context</code> member name (in this case,  <code>printHeader</code>) must generate the same key (e.g. <code>print_header</code> and <code>printHeader</code> both generate <code>printheader</code>).</p> <p>Each key must be unique across the <code>Context</code> member names.</p>"},{"location":"developer-guide/cli-options/#precedence","title":"Precedence","text":"<p>SIPNET options can be specified in either (or both) a config file or a command-line option. Command-line options are have precedence over config file options.</p> <p>However, because the command line is parsed first (due to the chicken-and-egg problem that the command line specifies where the config file is!), the code must keep track of - and maintain - the source of the option value.  This means that: - Options must be set via the macros <code>CREATE_INT_CONTEXT</code>/<code>CREATE_CHAR_CONTEXT</code> when they are created. - The functions <code>updateIntContext</code>/<code>updateCharContext</code> must be used when updating a value.</p> <p>See the Function/Macro Reference at the end for more information.</p>"},{"location":"developer-guide/cli-options/#steps-to-add-each-type-of-option","title":"Steps to Add Each Type of Option","text":"<p>For each type of option, the steps are similar:</p> <ol> <li>Add a member to the <code>Context</code> struct in <code>common/context.h</code>.</li> <li>Initialize the member in <code>initContext()</code> in <code>common/context.c</code>.</li> <li>Update the <code>NUM_FLAG_OPTIONS</code> in <code>src/sipnet/cli.h</code> (for flags only).</li> <li>Update the <code>long_options</code> struct in <code>src/sipnet/cli.c</code> to include the new option.</li> <li>Add tests for the new option's functionality.</li> <li>Update documentation.</li> </ol> <p>But the specific details of steps 1-4 vary depending on the type of option, as described below.</p>"},{"location":"developer-guide/cli-options/#flag-options","title":"Flag options","text":"<p>Flags are boolean on/off options, such as <code>print_header</code> or <code>events</code> (and their corresponding  negations, <code>no_print_header</code> and <code>no_events</code>). The code is setup to make it easy to add both halves of the pair.</p> <p>Here are the steps to add a flag:</p> <ol> <li>In <code>common/context.h</code>: Add a member to the <code>Context</code> struct to hold the param's value</li> <li>In <code>commont/context.c</code>: Initialize the default value in initContext() using the <code>CREATE_INT_CONTEXT</code> macro</li> <li>In <code>src/sipnet/cli.h</code>: increment the value of <code>NUM_FLAG_OPTIONS</code></li> <li>In <code>src/sipnet/cli.c</code>: </li> <li>Add the new option to <code>struct long_options</code> using the <code>DECLARE_FLAG</code> macro AT THE END OF THE LIST OF CURRENT FLAGS; all flags must be at the top of the <code>long_options</code> struct</li> <li>Add the new option to <code>argNameMap</code> using the <code>DECLARE_ARG_FOR_MAP</code> macro AT THE END OF THE LIST OF CURRENT FLAGS; the order of these declarations must match the order in <code>long_options</code></li> <li>Update <code>usage()</code> to document the new option in the help text</li> </ol> <p>Note: the function that parses the command line options (<code>parseCLIArgs()</code> in <code>src/sipnet/cli.c</code>) automatically handles flag options. There is nothing to add there for new flags.</p>"},{"location":"developer-guide/cli-options/#integer-valued-options","title":"Integer-valued options","text":"<p>Integer-valued options expect an integer value after the option (e.g., <code>--num_carbon_pools 3</code>).  If the option has a short-form version (with or without a long-form version), follow the steps below.  For long-form only options, see the notes at the end of this section.</p> <p>Here are the steps to add an int-value option:</p> <ol> <li>In <code>common/context.h</code>: Add a member to the <code>Context</code> struct to hold the param's value</li> <li>In <code>commont/context.c</code>: Initialize the default value in initContext() using the <code>CREATE_INT_CONTEXT</code> macro</li> <li>In <code>src/sipnet/cli.c</code>:<ol> <li>Add the new option to <code>struct long_options</code>... [details TBD]</li> <li>Update <code>parseCLIArgs()</code>... [details TBD]</li> <li>Update <code>usage()</code> to document the new option in the help text</li> </ol> </li> </ol>"},{"location":"developer-guide/cli-options/#string-valued-options","title":"String-valued options","text":"<p>String-valued options expect a string value after the option (e.g., <code>-input_file sipnet.in</code>). If the option has a short-form version (with or without a long-form version), follow the steps below. For long-form only options, see the notes at the end of this section.</p> <p>Here are the steps to add a string-valued option:</p> <ol> <li>In <code>common/context.h</code>: Add a member to the <code>Context</code> struct to hold the param's value</li> <li>In <code>commont/context.c</code>: Initialize the default value in initContext() using the <code>CREATE_CHAR_CONTEXT</code> macro </li> <li>In <code>src/sipnet/cli.c</code>:</li> <li>Add the new option to <code>struct long_options</code>... [details TBD]</li> <li>Update <code>parseCLIArgs()</code>... [details TBD]</li> <li>Update <code>usage()</code> to document the new option in the help text</li> </ol>"},{"location":"developer-guide/cli-options/#long-form-only-options","title":"Long-Form Only Options","text":"<p>When adding to the <code>long_options</code> struct in step 3(i), give an int value as the last element of the the new struct. This is the index that should be used in the <code>parseCLIArgs()</code> switch statement for handling the new option. The int value must be unique among the other case labels.</p>"},{"location":"developer-guide/cli-options/#additional-steps-tbd","title":"Additional Steps [TBD]","text":"<ol> <li>Documentation is great:</li> <li><code>src/sipnet/cli.c</code><ul> <li>Add new option to help message</li> <li>Update <code>NUM_FLAG_OPTIONS</code>.</li> <li>Anythiing else?</li> </ul> </li> <li>Update the documentation in <code>docs/user-guide/cli-options.md</code> [TBD]      (could this be automated by adding <code>sipnet -h &gt; docs/user-guide/cli-options.md</code>) to <code>make document</code>?.</li> <li>Testing is great.</li> <li>Add tests for both the new option and its negation (if applicable) in [TBD].</li> <li>Anything to here to make sure this works in <code>sipnet.in</code> [TBD]?</li> </ol>"},{"location":"developer-guide/cli-options/#functionmacro-reference","title":"Function/Macro Reference","text":"<p>When adding a new CLI option, these functions and macros should be used to create and update the corresponding fields in the <code>Context</code> struct.</p>"},{"location":"developer-guide/cli-options/#create_int_context","title":"<code>CREATE_INT_CONTEXT</code>","text":"<p>This macro is used to initialize the <code>Context</code> field as well as create the necessary  metadata information for integer-based arguments, both flag and not. This macro is used in the <code>initContext</code> function in <code>src/common/context.c</code>.</p> <p>Syntax: <pre><code>CREATE_INT_CONTEXT(name, printName, value, flag)\n</code></pre> Arguments: - <code>name</code>: the exact name (no quotes) of the <code>Context</code> struct member used in <code>Context.h</code> - <code>printName</code>: the name used for this option when printing via <code>--dump-config</code> - <code>value</code>: the default integer value for this option; the defined values <code>ARG_ON</code> and <code>ARG_OFF</code> can be used for flag options - <code>flag</code>: <code>FLAG_YES</code> or <code>FLAG_NO</code> to indicate whether this is a flag option</p> <p>Examples: <code>CREATE_INT_CONTEXT(snow, \"SNOW\", ARG_ON, FLAG_YES);</code> <code>CREATE_INT_CONTEXT(numSoilCarbonPools, \"NUM_SOIL_CARBON_POOLS\", 3, FLAG_NO);</code></p>"},{"location":"developer-guide/cli-options/#create_char_context","title":"<code>CREATE_CHAR_CONTEXT</code>","text":"<p>This macro is used to initialize the <code>Context</code> field as well as create the necessary metadata information for string-based arguments. This macro is used in the <code>initContext</code> function in <code>src/common/context.c</code>.</p> <p>Syntax: <pre><code>CREATE_CHAR_CONTEXT(name, printName, value)\n</code></pre> Arguments: - <code>name</code>: the exact name (no quotes) of the <code>Context</code> struct member used in <code>Context.h</code> - <code>printName</code>: the name used for this option when printing via <code>--dump-config</code> - <code>value</code>: the default string value for this option</p> <p>Examples: <code>CREATE_CHAR_CONTEXT(outConfigFile, \"OUT_CONFIG_FILE\", NO_DEFAULT_FILE);</code> <code>CREATE_CHAR_CONTEXT(inputFile, \"INPUT_FILE\", DEFAULT_INPUT_FILE);</code></p>"},{"location":"developer-guide/cli-options/#updateintcontext","title":"<code>updateIntContext</code>","text":"<p>This function is used to update an integer-based argument, both the stored value as well as the source of that value.  This function is typically used in the <code>parseCommandLineArgs</code> function in <code>src/sipnet/cli.c</code>. Note that flag options should not need this, as they are handled automatically.</p> <p>Syntax: <pre><code>updateIntContext(const char *name, int value, context_source_t source)\n</code></pre> Arguments: - <code>name</code>: a string that can uniquely identify the option (see Naming above) - <code>value</code>: the new integer value for the option  - <code>source</code>: where the value is coming from, e.g. <code>CTX_CONTEXT_FILE</code> or <code>CTX_COMMAND_LINE</code></p> <p>Examples: <code>updateIntContext(inputName, intVal, CTX_CONTEXT_FILE);</code> (from parsing the input file) <code>updateIntContext(\"numSoilCarbonPools\", intVal, CTX_COMMAND_LINE);</code> (from parsing the command line)</p>"},{"location":"developer-guide/cli-options/#updatecharcontext","title":"<code>updateCharContext</code>","text":"<p>This function is used to update a string-based argument, both the stored value as well as the source of that value. This function is typically used in the <code>parseCommandLineArgs</code> function in <code>src/sipnet/cli.c</code>.</p> <p>Syntax: <pre><code>updateCharContext(const char *name, const char *value, context_source_t source)\n</code></pre> Arguments: - <code>name</code>: a string that can uniquely identify the option (see Naming above) - <code>value</code>: the new string value for the option - <code>source</code>: where the value is coming from, e.g. <code>CTX_CONTEXT_FILE</code> or <code>CTX_COMMAND_LINE</code></p> <p>Examples: <code>updateCharContext(inputName, inputValue, CTX_CONTEXT_FILE);</code> (from parsing the input file) <code>updateCharContext(\"inputFile\", optarg, CTX_COMMAND_LINE);</code> (from parsing the command line)</p>"},{"location":"developer-guide/code-structure/","title":"Code Structure","text":"<p>This guide documents how state is advanced each timestep and the conventions that keep flux calculations pure and pool updates centralized.</p>"},{"location":"developer-guide/code-structure/#timestep-phases-in-updatestate","title":"Timestep Phases (in <code>updateState()</code>)","text":"<p>1) Initialize fluxes - Zero all <code>fluxes.*</code> and <code>fluxes.event*</code>.</p> <p>2) Compute fluxes (pure calculations) - <code>calculateFluxes()</code> computes photosynthesis, respiration, water/snow, etc. - <code>processEvents()</code> converts scheduled/instant events to <code>fluxes.event*</code> deltas (no pool mutation). - <code>soilDegradation()</code> and other biogeochemical modules compute additional flux rates only (no pool mutation). - No function in this phase mutates <code>envi.*</code> or <code>trackers.*</code>.</p> <p>3) Apply pool updates (single place) - <code>applyPoolUpdates()</code> is the only code that changes <code>envi.*</code>. - For each pool P: \u0394P = (sum of rate fluxes to P) * climate.length + (sum of <code>fluxes.event*</code> deltas to P). - Apply bounds, conservation, and cross-pool constraints here.</p> <p>4) Trackers and running means - <code>updateTrackers()</code> uses timestep-integrated values (rate * climate.length) plus event deltas.</p> <p>5) Output - <code>outputState()</code> and any optional diagnostics/logging.</p>"},{"location":"developer-guide/code-structure/#pseudocode-outline","title":"Pseudocode outline","text":"<ul> <li>updateState():</li> <li>zeroFluxes()</li> <li>calculateFluxes()        // pure rates</li> <li>processEvents()          // sets fluxes.event* deltas only</li> <li>soilDegradation()        // pure rates</li> <li>applyPoolUpdates()       // the only place that mutates envi.*</li> <li>updateTrackers()</li> <li>outputState()</li> </ul>"},{"location":"developer-guide/code-structure/#mutability-rules-must-follow","title":"Mutability Rules (must-follow)","text":"<ul> <li>Only <code>applyPoolUpdates()</code> may change <code>envi.*</code>.</li> <li>Flux calculators:</li> <li>May read <code>envi.*</code>, <code>params.*</code>, <code>ctx.*</code>, <code>climate.*</code>.</li> <li>May write <code>fluxes.*</code> (rates) and <code>fluxes.event*</code> (event deltas).</li> <li>Must not mutate <code>envi.*</code>, <code>trackers.*</code>, or perform I/O as logic side-effects.</li> <li>Events never change pools directly; they only add to <code>fluxes.event*</code>.</li> </ul>"},{"location":"developer-guide/code-structure/#units-and-integration","title":"Units and Integration","text":"<ul> <li>Rate fluxes in <code>fluxes.*</code> are per-day rates (pool units per day).</li> <li>Event deltas in <code>fluxes.event*</code> are direct pool deltas (same units as pools), not rates.</li> <li>Integration per pool each timestep:</li> <li>\u0394pool_from_rates = (sum of relevant <code>fluxes.*</code>) * climate.length</li> <li>\u0394pool_from_events = (sum of relevant <code>fluxes.event*</code>)</li> <li>pool += \u0394pool_from_rates + \u0394pool_from_events</li> </ul>"},{"location":"developer-guide/code-structure/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>envi.*        State variables (pools, water, snow, canopy, soil layers).</li> <li>fluxes.*      Per-day flux rates computed in the flux phase.</li> <li>fluxes.event* Instantaneous/event deltas to be applied during pool update.</li> <li>trackers.*    Integrated timestep values, cumulative sums, yearly aggregates.</li> <li>params.*      Fixed run parameters (immutable during a run).</li> <li>ctx.*         Feature flags / configuration switches.</li> <li>climate.*     Forcing for the current timestep (e.g., length, met drivers).</li> <li>diag.*        Optional transient diagnostics (no side effects on state).</li> </ul> <p>Name fluxes by direction and target, e.g., <code>fluxes.NPP</code>, <code>fluxes.soilRespiration</code>, <code>fluxes.leafLitterToSoil</code>, <code>fluxes.eventHarvestC</code>. Prefer \u201cto/from\u201d clarity for transfers.</p>"},{"location":"developer-guide/code-structure/#pool-update-responsibilities","title":"Pool Update Responsibilities","text":"<ul> <li>Apply all additions/removals in a consistent order if constraints require it (e.g., water first if it bounds biochemical rates next step).</li> <li>Enforce invariants:</li> <li>No negative pools; clamp with tracked deficits and warnings if needed.</li> <li>Mass conservation across linked pools (e.g., C/N stoichiometry) with balanced cross-pool transfers.</li> <li>Centralize any event-specific application here (e.g., harvest removing biomass, adding residues).</li> </ul>"},{"location":"developer-guide/code-structure/#adding-a-new-flux-or-event","title":"Adding a New Flux or Event","text":"<ul> <li>Rates: add a <code>fluxes.*</code> variable, compute it in a flux function, and integrate it in <code>applyPoolUpdates()</code>.</li> <li>Events: add a <code>fluxes.event*</code> delta, accumulate in <code>processEvents()</code>, apply it in <code>applyPoolUpdates()</code>.</li> <li>Do not mutate <code>envi.*</code> in calculators or event processors.</li> </ul>"},{"location":"developer-guide/code-structure/#logging-errors","title":"Logging &amp; Errors","text":"<ul> <li>Use <code>logError()</code> and <code>logWarning()</code> (not printf) so tests can capture output.</li> <li>Messages should include timestep context: year, day, event type (if relevant), and the offending value(s).</li> <li>Emit warnings on clamping, conservation corrections, or unexpected negative fluxes.# Code Structure</li> </ul> <p>This guide documents how state is advanced each timestep and the conventions that keep flux calculations pure and pool updates centralized.</p>"},{"location":"developer-guide/code-structure/#timestep-phases-in-updatestate_1","title":"Timestep Phases (in <code>updateState()</code>)","text":"<p>1) Initialize fluxes - Zero all <code>fluxes.*</code> and <code>fluxes.event*</code>.</p> <p>2) Compute fluxes (pure calculations) - <code>calculateFluxes()</code> computes photosynthesis, respiration, water/snow, etc. - <code>processEvents()</code> converts scheduled/instant events to <code>fluxes.event*</code> deltas (no pool mutation). - <code>soilDegradation()</code> and other biogeochemical modules compute additional flux rates only (no pool mutation). - No function in this phase mutates <code>envi.*</code> or <code>trackers.*</code>.</p> <p>3) Apply pool updates (single place) - <code>applyPoolUpdates()</code> is the only code that changes <code>envi.*</code>. - For each pool P: \u0394P = (sum of rate fluxes to P) * climate.length + (sum of <code>fluxes.event*</code> deltas to P). - Apply bounds, conservation, and cross-pool constraints here.</p> <p>4) Trackers and running means - <code>updateTrackers()</code> uses timestep-integrated values (rate * climate.length) plus event deltas.</p> <p>5) Output - <code>outputState()</code> and any optional diagnostics/logging.</p>"},{"location":"developer-guide/code-structure/#pseudocode-outline_1","title":"Pseudocode outline","text":"<ul> <li>updateState():</li> <li>zeroFluxes()</li> <li>calculateFluxes()        // pure rates</li> <li>processEvents()          // sets fluxes.event* deltas only</li> <li>soilDegradation()        // pure rates</li> <li>applyPoolUpdates()       // the only place that mutates envi.*</li> <li>updateTrackers()</li> <li>outputState()</li> </ul>"},{"location":"developer-guide/code-structure/#mutability-rules-must-follow_1","title":"Mutability Rules (must-follow)","text":"<ul> <li>Only <code>applyPoolUpdates()</code> may change <code>envi.*</code>.</li> <li>Flux calculators:</li> <li>May read <code>envi.*</code>, <code>params.*</code>, <code>ctx.*</code>, <code>climate.*</code>.</li> <li>May write <code>fluxes.*</code> (rates) and <code>fluxes.event*</code> (event deltas).</li> <li>Must not mutate <code>envi.*</code>, <code>trackers.*</code>, or perform I/O as logic side-effects.</li> <li>Events never change pools directly; they only add to <code>fluxes.event*</code>.</li> </ul>"},{"location":"developer-guide/code-structure/#units-and-integration_1","title":"Units and Integration","text":"<ul> <li>Rate fluxes in <code>fluxes.*</code> are per-day rates (pool units per day).</li> <li>Event deltas in <code>fluxes.event*</code> are direct pool deltas (same units as pools), not rates.</li> <li>Integration per pool each timestep:</li> <li>\u0394pool_from_rates = (sum of relevant <code>fluxes.*</code>) * climate.length</li> <li>\u0394pool_from_events = (sum of relevant <code>fluxes.event*</code>)</li> <li>pool += \u0394pool_from_rates + \u0394pool_from_events</li> </ul>"},{"location":"developer-guide/code-structure/#naming-conventions_1","title":"Naming Conventions","text":"<ul> <li>envi.*        State variables (pools, water, snow, canopy, soil layers).</li> <li>fluxes.*      Per-day flux rates computed in the flux phase.</li> <li>fluxes.event* Instantaneous/event deltas to be applied during pool update.</li> <li>trackers.*    Integrated timestep values, cumulative sums, yearly aggregates.</li> <li>params.*      Fixed run parameters (immutable during a run).</li> <li>ctx.*         Feature flags / configuration switches.</li> <li>climate.*     Forcing for the current timestep (e.g., length, met drivers).</li> <li>diag.*        Optional transient diagnostics (no side effects on state).</li> </ul> <p>Name fluxes by direction and target, e.g., <code>fluxes.NPP</code>, <code>fluxes.soilRespiration</code>, <code>fluxes.leafLitterToSoil</code>, <code>fluxes.eventHarvestC</code>. Prefer \u201cto/from\u201d clarity for transfers.</p>"},{"location":"developer-guide/code-structure/#pool-update-responsibilities_1","title":"Pool Update Responsibilities","text":"<ul> <li>Apply all additions/removals in a consistent order if constraints require it (e.g., water first if it bounds biochemical rates next step).</li> <li>Enforce invariants:</li> <li>No negative pools; clamp with tracked deficits and warnings if needed.</li> <li>Mass conservation across linked pools (e.g., C/N stoichiometry) with balanced cross-pool transfers.</li> <li>Centralize any event-specific application here (e.g., harvest removing biomass, adding residues).</li> </ul>"},{"location":"developer-guide/code-structure/#adding-a-new-flux-or-event_1","title":"Adding a New Flux or Event","text":"<ul> <li>Rates: add a <code>fluxes.*</code> variable, compute it in a flux function, and integrate it in <code>applyPoolUpdates()</code>.</li> <li>Events: add a <code>fluxes.event*</code> delta, accumulate in <code>processEvents()</code>, apply it in <code>applyPoolUpdates()</code>.</li> <li>Do not mutate <code>envi.*</code> in calculators or event processors.</li> </ul>"},{"location":"developer-guide/code-structure/#logging-errors_1","title":"Logging &amp; Errors","text":"<ul> <li>Use <code>logError()</code> and <code>logWarning()</code> (not printf) so tests can capture output.</li> <li>Messages should include timestep context: year, day, event type (if relevant), and the offending value(s).</li> <li>Emit warnings on clamping, conservation corrections, or unexpected negative fluxes.</li> </ul>"},{"location":"developer-guide/logging/","title":"Logging","text":"<p>SIPNET's logger is a small wrapper around <code>printf</code> that adds standard prefixes and, for internal errors, the source file and line number. It is defined in <code>common/logging.h</code> and implemented in <code>common/logging.c</code>.</p>"},{"location":"developer-guide/logging/#levels","title":"Levels","text":"<ul> <li>0: Quiet-able (suppressed by <code>--quiet</code>).</li> <li>1: Always on (not suppressed).</li> <li>2: Always on and includes <code>file:line</code>.</li> </ul>"},{"location":"developer-guide/logging/#usage","title":"Usage","text":"<ul> <li>logInfo: Level 0; routine progress, configuration summaries, expected state changes.</li> <li>logWarning: Level 0; Recoverable issues or surprises; fallbacks, deprecated/ignored inputs.</li> <li>logTest: Level 1; Deter\u00f8inistic messages for tests/CI; not user-facing.</li> <li>logError: Level 1; Non-recoverable problems preventing correct operation; abort/exit or skip major task.</li> <li> <p>logInternalError: Level 2; Errors that should never happen; include details and ask to report.</p> </li> <li> <p>Include the header:    <pre><code>#include \"common/logging.h\"\n</code></pre></p> </li> <li>Log messages:    <pre><code>logInfo(\"Initialized OK\\n\");\nlogWarning(\"Deprecated parameter: %s\\n\", name);\nlogTest(\"Iteration %d\\n\", i);\nlogError(\"Missing required parameter: %s\\n\", key);\nlogInternalError(\"Unexpected state: %d\\n\", code);\n</code></pre></li> <li>Example outputs:     <pre><code>[INFO   ] Initialized OK\n[WARNING] Deprecated parameter: foo\n[TEST   ] Iteration 12\n[ERROR  ] Missing required parameter: bar\n[ERROR (INTERNAL)] (myfile.c:123) Unexpected state: 5\n</code></pre></li> </ul>"},{"location":"developer-guide/logging/#notes","title":"Notes:","text":"<ul> <li>Each log prints a fixed prefix (e.g., <code>[INFO   ]</code>, <code>[WARNING]</code>, <code>[ERROR  ]</code>).</li> <li>Messages use <code>printf</code>-style formatting. Include <code>\\n</code> yourself if you want a newline.</li> <li>Level 2 (<code>logInternalError</code>) prints file:line; levels 0\u20131 print just the prefix.</li> </ul>"},{"location":"developer-guide/testing/","title":"Testing","text":""},{"location":"developer-guide/testing/#summary","title":"Summary","text":"<p>What to Test</p> <ul> <li>Core functionality of SIPNET, including parsing, event handling, and input processing.</li> <li>System behavior under various scenarios, including edge cases.</li> </ul> <p>Types of tests:</p> <ul> <li>Unit tests in <code>tests/sipnet/*</code>: C tests for parsers, events, inputs, and infrastructure.</li> <li>Smoke tests in <code>tests/smoke/*</code>: short end\u2011to\u2011end runs that validate outputs against committed references.</li> </ul>"},{"location":"developer-guide/testing/#unit-tests","title":"Unit Tests","text":"<ul> <li>Build all unit tests only:   <pre><code>make testbuild\n</code></pre></li> <li>Run all unit tests (wrapper with summary):   <pre><code>make unit\n# or: ./tools/run_unit_tests.sh\n# or: make testrun (per-directory runners)\n</code></pre></li> </ul> <p>What to expect:</p> <ul> <li>List of tests that have been run, with their individual results and exit code.</li> <li>A summary table of each test with its status (PASS/FAIL).</li> </ul> <p>Run a single suite or test:</p> <ul> <li>By directory (common during development):   <pre><code>make -C tests/sipnet/test_events_infrastructure\nmake -C tests/sipnet/test_events_infrastructure run\n</code></pre></li> <li>Directly (after building):   <pre><code>cd tests/sipnet/test_events_types\n./testEventIrrigation\n</code></pre></li> </ul> <p>Add a unit test: - Add a <code>*.c</code> test file in the appropriate <code>tests/sipnet/&lt;area&gt;/</code> folder and list it in that folder\u2019s <code>Makefile</code> (variable <code>TEST_CFILES</code>). The shared helpers live in <code>tests/utils/</code>.</p>"},{"location":"developer-guide/testing/#smoke-tests","title":"Smoke Tests","text":"<p>Run all smoke tests: <pre><code>make smoke\n# or: ./tests/smoke/run_smoke.sh\n</code></pre></p> <p>What it does:</p> <ul> <li>Runs SIPNET in each directory under <code>tests/smoke/</code>. (<code>cd tests/smoke/&lt;dir&gt; &amp;&amp; ../../../sipnet -i sipnet.in</code>).</li> <li>Compares generated <code>sipnet.out</code>, <code>events.out</code>, and <code>sipnet.config</code> to the committed versions using <code>git diff</code>.</li> <li>Prints a summary of passes/fails and a skip count.</li> </ul> <p>Updating references intentionally:</p> <ul> <li>If changes are expected and outputs are correct, review diffs and commit the updated <code>*.out</code> files (and any config changes). The script\u2019s final message explains this workflow.</li> </ul> <p>Notes:</p> <ul> <li>Some scenarios are temporarily skipped via a <code>skip</code> marker file.</li> <li><code>events.out</code> is a debug artifact listing applied event deltas per timestep; authoritative model state is in <code>sipnet.out</code>.</li> </ul>"},{"location":"developer-guide/testing/#logging-in-tests","title":"Logging in Tests","text":"<p>Use <code>logTest()</code>, <code>logError()</code>, and friends from <code>src/common/logging.h</code> for deterministic output captured by tests. Avoid <code>printf</code> in new code.</p>"},{"location":"developer-guide/testing/#ci-and-docs","title":"CI and Docs","text":"<ul> <li>The smoke tests are designed to be fast and run in CI.</li> <li>Run everything locally as CI would:   <pre><code>make test\n</code></pre></li> <li>API docs and site: <code>make document</code> builds Doxygen under <code>docs/api/</code> and the MkDocs site under <code>site/</code>.</li> </ul>"},{"location":"user-guide/model-inputs/","title":"Model Inputs","text":"<p>There are three main types of input files needed to run SIPNET: 1. <code>sipnet.param</code>: Model parameter file. 2. <code>&lt;sitename&gt;.clim</code>: Climate file, provides weather data for each time step of the simulation period. 3. <code>events.in</code>: (Optional) Agronomic events. 4. Run time options (command line arguments or config file <code>sipnet.in</code>)</p>"},{"location":"user-guide/model-inputs/#parameters-and-initial-conditions","title":"Parameters and Initial Conditions","text":"<p>Both initial conditions and parameters are specified in a file named <code>sipnet.param</code>.</p> <p>The SIPNET parameter file (<code>sipnet.param</code>) specifies model parameters and their properties for each simulation.  Each line in the file corresponds to a single parameter and contains five or six space-separated values.</p> Column Description Parameter Name Name of the parameter Value Value of the parameter to use in the model"},{"location":"user-guide/model-inputs/#example-sipnetparam-file","title":"Example <code>sipnet.param</code> file","text":"<p>Column names are not used, but are:</p> <pre><code>param_name value\n</code></pre> <p>The first lines in <code>sipnet.param</code> could be:</p> <pre><code>plantWoodInit 110\nlaiInit 0\nlitterInit 200\nsoilInit 7000\nlitterWFracInit 0.5\nsoilWFracInit 0.6\nsnowInit 1\nmicrobeInit 0.5\nfineRootFrac 0.2\ncoarseRootFrac 0.2\naMax 95\naMaxFrac 0.85\n...\n</code></pre>"},{"location":"user-guide/model-inputs/#climate","title":"Climate","text":"<p>For each step of the model, the following inputs are needed. These are provided in a file named <code>&lt;sitename&gt;.clim</code> with the following columns:</p> col parameter description units notes 1 year year of start of this timestep integer, e.g. 2010 2 day day of start of this timestep Day of year 1 = Jan 1 3 time time of start of this timestep hours after midnight e.g. noon = 12.0, midnight = 0.0, can be a fraction 4 length length of this timestep days variable-length timesteps allowed, typically not used 5 tair avg. air temp for this time step degrees Celsius 6 tsoil average soil temperature for this time step degrees Celsius can be estimated from Tair 7 par average photosynthetically active radiation (PAR) for this time step \\(\\text{Einsteins} \\cdot m^{-2} \\text{ground area} \\cdot \\text{time step}^{-1}\\) input is in Einsteins * m^-2 ground area, summed over entire time step 8 precip total precip. for this time step cm input is in mm; water equivilant - either rain or snow 9 vpd average vapor pressure deficit kPa input is in Pa, can be calculated from air temperature and relative humidity. 10 vpdSoil average vapor pressure deficit between soil and air kPa input is in Pa ; differs from vpd in that saturation vapor pressure is calculated using Tsoil rather than Tair 11 vPress average vapor pressure in canopy airspace kPa input is in Pa 12 wspd avg. wind speed m/s <p>Note: An older format for this file included location as the first column and soilWetness as the last column. Files with this older format can still be read by sipnet: * SIPNET will print a warning indicating that it is ignoring the obsolete columns * If there is more than one location specified in the file, SIPNET will error and halt</p>"},{"location":"user-guide/model-inputs/#example-sipnetclim-file","title":"Example <code>sipnet.clim</code> file:","text":"<p>Column names are not used, but are:</p> <pre><code>loc year day  time length tair tsoil par    precip vpd   vpdSoil vPress wspd\n</code></pre> <p>Half-hour time step</p> <pre><code>0   1998 305  0.00    -1800   1.9000   1.2719   0.0000   0.0000 109.5364  77.5454 726.6196   1.6300\n0   1998 305  0.50    -1800   1.9000   1.1832   0.0000   0.0000 109.5364  73.1254 726.6196   1.6300\n0   1998 305  1.00    -1800   2.0300   1.1171   0.0000   0.0000 110.4243  63.9567 732.5092   0.6800\n0   1998 305  1.50    -1800   2.0300   1.0439   0.0000   0.0000 110.4243  60.3450 732.5092   0.6800\n</code></pre> <p>Variable time step</p> <pre><code>0     1998 305  0.00  0.292 1.5  0.8   0.0000 0.0000 105.8 70.1    711.6  0.9200\n0     1998 305  7.00  0.417 3.6  1.8   5.6016 0.0000 125.7 23.5    809.4  1.1270\n0     1998 305 17.00  0.583 1.9  1.3   0.0000 0.0000 108.1 75.9    732.7  1.1350\n0     1998 306  7.00  0.417 2.2  1.4   2.7104 1.0000 114.1 71.6    741.8  0.9690\n</code></pre>"},{"location":"user-guide/model-inputs/#agronomic-events","title":"Agronomic Events","text":"<p>Agronomic (management) events are read from an <code>events.in</code> file. This file specifies one event per line:</p> col parameter description units notes 1 year Year of the event e.g. 2025 2 day Day of year of the event DOY 1 = Jan 1 3 event_type Event type code one of: <code>plant</code>, <code>harv</code>, <code>till</code>, <code>fert</code>, <code>irrig</code> 4\u2026n event_param Type\u2011specific parameters (see below) varies Order depends on event type <p>Rules:</p> <ul> <li>File must be in chronological order. Ties (same day multiple events) are allowed and processed in file order.</li> <li>Events are specified at day resolution (no sub\u2011daily timestamp).</li> <li>Every (year, day) appearing in <code>events.in</code> must have at least one corresponding climate record; otherwise SIPNET errors.</li> <li>Values in <code>events.in</code> are instantaneous amounts (cm or mass/area) applied on the date and time of the first climate record matching that event's year and day.</li> </ul> <p>See subsections below for details and parameter definitions for each event type.</p>"},{"location":"user-guide/model-inputs/#irrigation","title":"Irrigation","text":"parameter col req? description amount 5 Y Amount added (cm) method 6 Y 0=canopy1=soil2=flood (placeholder) <p>Model representation: An irrigation event increases soil moisture. A fraction of canopy irrigation is immediately evaporated.</p> <p>Specifically: </p> <ul> <li>For <code>method=soil</code>, this amount of water is added directly to the <code>soilWater</code> state variable </li> <li>For <code>method=canopy</code>, a fraction of the irrigation water (determined by input param <code>immedEvapFrac</code>) is added to the flux state variable <code>immedEvap</code>, with the remainder going to <code>soilWater</code>.</li> <li>Initial implementation assumes that LITTER_WATER is not on. This might be revisited at a later date.</li> </ul>"},{"location":"user-guide/model-inputs/#fertilization","title":"Fertilization","text":"parameter col req? description org-N 5 Y g N / m2 org-C 6 Y g C / m2 min-N 7 Y g N / m2 <ul> <li>Model representation: increases size of mineral N and litter C and N. Urea-N is assumed to be mineral N.</li> </ul> <ul> <li>The code that generates <code>events.in</code> will handle conversion from fertilizer amount and type to mass of N and C allocated to different pools. In PEcAn this is done by the <code>PEcAn.SIPNET::write.configs.SIPNET()</code> function.</li> </ul>"},{"location":"user-guide/model-inputs/#tillage","title":"Tillage","text":"parameter col req? description tillageEff \\((f_{\\textrm{till}})\\) 5 Y Adjustment to \\(R_H\\) <ul> <li>Model representation:</li> <li>Transient increase in decomposition rate by \\(f_{\\text{,tillage}}\\) that exponentially decays over time.</li> <li>Multiple tillage events are additive.</li> </ul>"},{"location":"user-guide/model-inputs/#planting","title":"Planting","text":"parameter col req? description leaf-C 5 Y C added to leaf pool (g C / m2) wood-C 6 Y C added to above-ground wood pool (g C / m2) fine-root-C 7 Y C added to fine root pool (g C / m2) coarse-root-C 8 Y C added to coarse root pool (g C / m2) <ul> <li>Model representation:</li> <li>Date of event is the date of emergence, not the date of actual planting </li> <li>Increases size of carbon pools by the amount of each respective parameter</li> <li>\\(N\\) pools are calculated from \\(CN\\) stoichiometric ratios.</li> <li>notes: PFT (crop type) is not an input parameter for a planting event because SIPNET only represents a single PFT.</li> </ul>"},{"location":"user-guide/model-inputs/#harvest","title":"Harvest","text":"parameter col req? description fraction of aboveground biomass removed 5 Y fraction of belowground biomass removed 6 N default = 0 fraction of aboveground biomass transferred to litter pool 7 N default = 1 - removed fraction of belowground biomass transferred to litter pool 8 N default = 1 - removed <ul> <li>model representation:</li> <li>biomass C and N pools are either removed or added to litter</li> <li>for annuals or plants terminated, no biomass remains (col 5 + col 7 = 1 and col 6 + col 8 = 1). </li> <li>for perennials, some biomass may remain (col 5 + col 7 &lt;= 1 and col 6 + col 8 &lt;= 1; remainder is living).</li> <li>root biomass is only removed for root crops</li> </ul>"},{"location":"user-guide/model-inputs/#example-of-eventsin-file","title":"Example of <code>events.in</code> file:","text":"<pre><code>2022  35  till   0.2      # tilled on day 35, f_till = 0.2 (20% boost to rate term)\n2022  40  till   0.1      # tilled on day 40, adds 0.1 to f_till\n2022  40  irrig  5 1      # 5cm canopy irrigation on day 40 applied to soil\n2022  40  fert   0 0 10   # fertilized with 10 g / m2 N_min on day 40 of 2022\n2022  50  plant  10 3 2 5 # plant emergence on day 50 with 10/3/2/4 g C / m2, respectively, added to the leaf/wood/fine root/coarse root pools \n2022  250 harv   0.1      # harvest 10% of aboveground plant biomass on day 250\n</code></pre>"},{"location":"user-guide/model-inputs/#run-time-options","title":"Run-time Options","text":"<p>Configuration settings are applied in the following order of precedence:</p> <ol> <li>Default values built into SIPNET</li> <li>Values from the configuration file</li> <li>Command-line arguments</li> </ol> <p>Thus, command-line arguments override settings in the configuration file, and configuration file settings override default values.</p>"},{"location":"user-guide/model-inputs/#input-output-options","title":"Input / Output Options","text":"Option Default Description <code>input-file</code> sipnet.in Name of input config file <code>file-name</code> sipnet Prefix of climate and parameter files"},{"location":"user-guide/model-inputs/#output-flags","title":"Output Flags","text":"Option Default Description <code>do-main-output</code> on Print time series of all output variables to <code>&lt;file-name&gt;.out</code> <code>do-single-outputs</code> off Print outputs one variable per file (e.g. <code>&lt;file-name&gt;.NEE</code>) <code>dump-config</code> on Print final config to <code>&lt;file-name&gt;.config</code> <code>print-header</code> on Whether to print header row in output files <code>quiet</code> off Suppress info and warning message"},{"location":"user-guide/model-inputs/#model-flags","title":"Model Flags","text":"Option Default Description <code>events</code> on Enable event handling. <code>gdd</code> on Use growing degree days to determine leaf growth. <code>growth-resp</code> off Explicitly model growth respiration, rather than including with maintenance respiration. <code>leaf-water</code> off Calculate leaf pool and evaporate from that pool. <code>litter-pool</code> off Enable litter pool in addition to single soil carbon pool. <code>microbes</code> off Enable microbe modeling. <code>snow</code> on Keep track of snowpack, rather than assuming all precipitation is liquid. <code>soil-phenol</code> off Use soil temperature to determine leaf growth. <code>water-hresp</code> on Whether soil moisture affects heterotrophic respiration. <p>Note the following restrictions on these options:  - <code>soil-phenol</code> and <code>gdd</code> may not both be turned on</p>"},{"location":"user-guide/model-inputs/#command-line-arguments","title":"Command Line Arguments","text":"<p>Command-line arguments can be used to specify run-time options when starting SIPNET. The syntax is as follows:</p> <pre><code>sipnet [options]\n</code></pre> <p>Where <code>[options]</code> can include any of the run-time options listed above.  Flags use the syntax <code>--flag</code> to turn them on, or <code>--no-flag</code> to turn them off. Other options are specified by <code>--option value</code>.</p> <p>See <code>sipnet --help</code> for a full list of available command-line options.</p>"},{"location":"user-guide/model-inputs/#configuration-file-format","title":"Configuration File Format","text":"<p>SIPNET reads a configuration file that specifies run-time options without using command-line arguments. By default, SIPNET looks for a file named <code>sipnet.in</code> in the current directory. These will be overwritten by command-line arguments if specified.</p> <p>The configuration file uses a simple key-value format, <code>option = value</code>,  with one option per line; comments follow <code>#</code>. Flags are specified as 0 for off and 1 for on.</p>"},{"location":"user-guide/model-inputs/#example-configuration-file","title":"Example Configuration File","text":"<p>Note that case is ignored for parameter names, as well as dashes and underscores.</p> <pre><code># Base filename (used for derived filenames)\nFILE_NAME = mysite\n\n# Output options\nDO_MAIN_OUTPUT = 1\nDO_SINGLE_OUTPUTS = 0\nDUMP_CONFIG = 1\nPRINT_HEADER = 1\nQUIET = 0\n\n# Model options\nEVENTS = 1\nGDD = 1\nGROWTH_RESP = 0\nLEAF_WATER = 0\nLITTER_POOL = 0\nMICROBES = 0\nSNOW = 1\nSOIL_PHENOL = 0\nWATER_HRESP = 1\n</code></pre> <p>When <code>DUMP_CONFIG</code> is on, SIPNET will output the final configuration (after applying all settings from defaults, configuration file, and command line) to a file named <code>&lt;file-name&gt;.config</code>.</p>"},{"location":"user-guide/model-outputs/","title":"Outputs","text":"<p>There are two main output files generated by SIPNET: 1. <code>sipnet.out</code>: Model state variables and fluxes at each timestep. 2. <code>events.out</code>: Contains a record of agronomic events processed during the simulation (if event handling is enabled).</p>"},{"location":"user-guide/model-outputs/#model-outputs","title":"Model Outputs","text":"<p>The <code>sipnet.out</code> file contains a time series of state variables and fluxes from the simulation.  </p> # Symbol Output Name Definition / Notes Units 1 year Year of start of timestep (integer) 2 day Day-of-year of start of timestep (integer) 3 time Hour-of-day (fractional) at start of timestep hours 4 plantWoodC Woody plant carbon g C m\\(^{-2}\\) 5 plantLeafC Leaf carbon g C m\\(^{-2}\\) 6 soil (Single) soil organic carbon (or mineral soil C pool) g C m\\(^{-2}\\) 7 microbeC Microbial carbon (0 if microbes flag off) g C m\\(^{-2}\\) 8 coarseRootC Coarse root carbon g C m\\(^{-2}\\) 9 fineRootC Fine root carbon g C m\\(^{-2}\\) 10 litter Litter carbon (0 if litter pool disabled) g C m\\(^{-2}\\) 11 soilWater Soil water content cm 12 \\(f_{\\text{WHC}}\\) soilWetnessFrac Soil water as fraction of holding capacity unitless 13 snow Snow water equivalent cm 14 npp Net primary production for timestep g C m\\(^{-2}\\) 15 nee Net ecosystem exchange (sign convention per code: - (NPP - RH)) g C m\\(^{-2}\\) 16 cumNEE Cumulative NEE since simulation start g C m\\(^{-2}\\) 17 \\(GPP\\) gpp Gross primary production g C m\\(^{-2}\\) 18 rAboveground Aboveground autotrophic respiration (leaves + wood) g C m\\(^{-2}\\) 19 \\(R_H\\) rSoil Heterotrophic respiration (maintenance + microbe terms per configuration) g C m\\(^{-2}\\) 20 rRoot Root (autotrophic) respiration g C m\\(^{-2}\\) 21 ra Total autotrophic respiration (rAboveground + rRoot) g C m\\(^{-2}\\) 22 rh Total heterotrophic respiration (litter + soil components) g C m\\(^{-2}\\) 23 \\(R\\) rtot Total ecosystem respiration (ra + rh) g C m\\(^{-2}\\) 24 evapotranspiration ET (transpiration + immedEvap + evaporation + sublimation) for timestep cm 25 fluxestranspiration Transpiration component only cm <p>An example output file can be found in tests/smoke/sipnet.out.</p> <pre><code>Notes: PlantWoodC, PlantLeafC, Soil and Litter in g C/m^2; Water and Snow in cm; SoilWetness is fraction of WHC;\nyear day time plantWoodC plantLeafC soil microbeC coarseRootC fineRootC litter litterWater soilWater soilWetnessFrac snow npp nee cumNEE gpp rAboveground rSoil rRoot ra rh rtot evapotranspiration fluxestranspiration\n1998 305  0.00  5759.77  1133.88 16000.06     8.00  1919.90  1919.64   0.500     6.00    0.500     0.00    -0.32     0.74     0.74     0.00    0.164    0.578    0.159    0.324    0.419    0.742 0.00302126   0.0000\n1998 305  7.00  5759.63  1133.71 16000.08     8.00  1919.77  1919.10   0.500     5.99    0.500     0.00    -0.30     0.97     1.71     0.22    0.271    0.917    0.251    0.522    0.666    1.188 0.00240544   0.0022\n1998 305 17.00  5759.16  1133.48 16000.15     8.00  1919.57  1918.37   0.500     5.99    0.499     0.00    -0.67     1.56     3.27     0.00    0.338    1.219    0.335    0.673    0.884    1.557 0.00662149   0.0000\n</code></pre>"},{"location":"user-guide/model-outputs/#events-output","title":"Events output","text":"<p>When event handling is enabled, SIPNET will create a file named <code>events.out</code>. </p> <p>This file is designed primarily for testing and debugging. It contains one row for each agronomic event that is processed.  Each row lists the year, day, event type, and parameter name/value pairs.  The name/value pairs represent the state variables that are directly changed by an event, recording the change (delta) applied to each.</p> <p>Information in <code>events.out</code> can, in principle, be reconstructed or inferred from <code>events.in</code> and <code>sipnet.out</code> though this may be confounded if simultaneous events affect the same variable.</p> <p>Still, <code>sipnet.out</code> is the authoritative source for information about system state and evolution in time, including responses to events.</p> <p>Below is an example <code>events.out</code>, with header enabled for clarity.  Note the delimiters: spaces separate columns, commas separate name/value pairs, and <code>=</code> map names with their values (deltas).</p> <pre><code>year  day  type     param_name=delta[,param_name=delta,...]\n2023   65  plant    envi.plantLeafC=3.00,envi.plantWoodC=4.00,envi.fineRootC=5.00,envi.coarseRootC=6.00\n2023   70  irrig    envi.soilWater=5.00\n2023  200  harv     env.litter=5.46,envi.plantLeafC=-5.93,envi.plantWoodC=-4.75,envi.fineRootC=-3.73,envi.coarseRootC=-3.89\n2024   65  plant    envi.plantLeafC=3.00,envi.plantWoodC=5.00,envi.fineRootC=7.00,envi.coarseRootC=9.00\n2024   70  irrig    fluxes.immedEvap=2.50,envi.soilWater=2.50\n2024  200  harv     env.litter=4.25,envi.plantLeafC=-1.39,envi.plantWoodC=-1.63,envi.fineRootC=-2.52,envi.coarseRootC=-2.97\n</code></pre>"}]}